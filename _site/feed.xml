<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-07-11T01:32:15-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Ash</title><subtitle>Blogs about information security, technology, red teaming, and other random musings.</subtitle><author><name>Ash</name></author><entry><title type="html">An Introduction to Kerberoasting</title><link href="http://localhost:4000/An-Introduction-To-Kerberoasting/" rel="alternate" type="text/html" title="An Introduction to Kerberoasting" /><published>2022-07-01T00:00:00-04:00</published><updated>2022-07-01T00:00:00-04:00</updated><id>http://localhost:4000/An-Introduction-To-Kerberoasting</id><content type="html" xml:base="http://localhost:4000/An-Introduction-To-Kerberoasting/">&lt;p class=&quot;notice--warning&quot;&gt;I originally developed this blog for the &lt;a href=&quot;https://risk3sixty.com/penetration-testing/&quot;&gt;Renegade Labs team&lt;/a&gt; at &lt;a href=&quot;https://risk3sixty.com/&quot;&gt;risk3sixty&lt;/a&gt;, and have cross-posted it here for replication of my personal work.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Artwork Credit: &lt;a href=&quot;https://www.emojisky.com/desc/7191149&quot;&gt;https://www.emojisky.com/desc/7191149&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;kerberoasting&quot;&gt;Kerberoasting&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Mitre ATT&amp;amp;CK Technique&lt;/th&gt;
      &lt;th&gt;ID&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://attack.mitre.org/techniques/T1558/003/&quot;&gt;Steal or Forge Kerberos Tickets: Kerberoasting&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;T1558.003&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;what-is-it&quot;&gt;What is it?&lt;/h2&gt;
&lt;p&gt;Kerberoasting is the attack that keeps on giving for adversaries and penesters alike. First documented in &lt;a href=&quot;https://www.youtube.com/watch?v=PUyhlN-E5MU&quot;&gt;2014&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/TimMedin&quot;&gt;Tim Medin&lt;/a&gt;, Kerberoasting is a tactic that  can be used after an intial compromise to gain access to alternate accounts in an Active Directory domain.&lt;/p&gt;

&lt;p&gt;It typically involves an attacker issuing a series of LDAP queries to a Domain Controller in search of user accounts that possess a value known as a Service Principal Name (SPN).&lt;/p&gt;

&lt;p&gt;If this value is set on an account, an attacker can request a service ticket (ST) for the identity, which is encrypted with the account’s NT hash. This service ticket can then be cracked offline by the attacker, which if successful will allow them to retrieve the cleartext password of the account.&lt;/p&gt;

&lt;p&gt;Lost already? No worries, let’s break down how the attack works, and how you may go about mitigating the risks it could introduce into your environment.&lt;/p&gt;

&lt;h2 id=&quot;why-should-i-care&quot;&gt;Why should I care?&lt;/h2&gt;
&lt;p&gt;This tactic has proven to be extremely potent in environments across the globe. There’s a reason why it’s still worth talking about eight years after it’s initial (public) discovery.&lt;/p&gt;

&lt;p&gt;On top of that, it’s known to be heavily leveraged by ransomware groups. For example, &lt;a href=&quot;https://www.bleepingcomputer.com/news/security/translated-conti-ransomware-playbook-gives-insight-into-attacks/&quot;&gt;Conti&lt;/a&gt;’s ransomware playbook includes the tactic in its standard operating procedures, and likely for good reason.&lt;/p&gt;

&lt;p&gt;Context matters, and Kerberoasting only applies &lt;em&gt;after an initial breach occurs&lt;/em&gt;. This blog should read under the guise of mitigating risk after a successful initial attack.&lt;/p&gt;

&lt;h2 id=&quot;how-does-it-work&quot;&gt;How does it work?&lt;/h2&gt;
&lt;h3 id=&quot;what-on-earth-is-a-service-principal-name&quot;&gt;What on earth is a Service Principal Name&lt;/h3&gt;
&lt;p&gt;A service principal name can be thought of as a unique identifier for services running on hosts. They are used for Kerberos authentication so clients can find the services they are trying to access.&lt;/p&gt;

&lt;p&gt;The SPN itself typicall comes in the form of:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;service/fqdn hostname@realm&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So if we have a server called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Web01&lt;/code&gt; in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;contoso.com&lt;/code&gt; domain, an SPN might exist on the host and look something like this:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http/Web01.contoso.com@contoso.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When an identitiy possesses an SPN, any user with a valid Ticket Tranting Ticket (TGT) can ask the Key Distribution Center (KDC) for a Service Ticket (ST) of the original identity.&lt;/p&gt;

&lt;h3 id=&quot;putting-it-all-together&quot;&gt;Putting it all together&lt;/h3&gt;
&lt;p&gt;Let’s say we are an attacker who has just landed into an internal network environment and knows one valid pair of credentials for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bob&lt;/code&gt; user. We want to gain more access to the domain, as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bob&lt;/code&gt; cannot perform any administrative duties or access other resources. We choose Kerberoasting as our preferred attack method, and begin searching for accounts with SPNs.&lt;/p&gt;

&lt;p&gt;W’ll use the “GetUserSPNs” script that is contained within the Impacket library to perform the enumeration and attack. We will run the toolset with the following options:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-outputfile encrypted_STs&lt;/code&gt;: Will save the requested service tickets&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TESTLAB.LOCAL/bob&lt;/code&gt;: Allows us to authenticate as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bob&lt;/code&gt; user&lt;/li&gt;
  &lt;li&gt;Once this toolset is run, we find that the “svc_backup” account possesses a ServicePrincipalName of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SDRSVC/backupserver&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/ad_kerberoasting/getuserspns.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Further analysis shows us that our requested ST has successfully been retrieved and written to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;encrypted_STs&lt;/code&gt; file we specified earlier.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/ad_kerberoasting/serviceticket.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Since this ST is encrypted with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svc_backup&lt;/code&gt; account’s password hash, we can try to crack it offline.&lt;/p&gt;

&lt;p&gt;We will use the John toolset to do this, which quickly finds that the identity possesses a password of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Passw0rd&lt;/code&gt;.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/ad_kerberoasting/crackingst.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;At this stage, an attacker will likely enumerate the privileges assigned to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svc_backup&lt;/code&gt; user. In our case, we will use BloodHound, which reveals that the identity has direct administrative privileges to the DC01 domain controller.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/ad_kerberoasting/svc_backupadminto.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;With this knowlege, the attacker dumps the stored hashed passwords and keys on the host using the acquired credentials for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svc_backup&lt;/code&gt; account. This effectively grants complete control of the domain.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/ad_kerberoasting/secretsdump.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Alternatively, an attacker could also use the access acquired through the compromised &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svc_backup&lt;/code&gt; user to directly authenticate to the domain controller and execute commands.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/ad_kerberoasting/psexec.png&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;how-do-i-stop-it&quot;&gt;How do I stop it?&lt;/h2&gt;

&lt;h3 id=&quot;passwords---easy&quot;&gt;Passwords - Easy&lt;/h3&gt;
&lt;p&gt;The first and foremost solution to mitigating Kerberoast attacks is a simple one. Set long, complex passwords for (user/service) accounts that possess a service principal name. Ideally these passwords should be greater than 25 characters in length and highly complex.&lt;/p&gt;

&lt;p&gt;An attacker can still request a service ticket for the account, but cracking it to derive the cleartext password for the user will be extremely difficult.&lt;/p&gt;

&lt;p&gt;This nullifies the impact of the attack, since a service ticket alone cannot be used for exploitation.&lt;/p&gt;

&lt;h3 id=&quot;audit-and-remove-service-principal-names---medium&quot;&gt;Audit and Remove Service Principal Names - Medium&lt;/h3&gt;
&lt;p&gt;Once accounts that possess a SPN receive a highly complex password, it may be worthwhile to audit and remove uneccessary SPNs within an environment. This can aid in eliminating risk from a high number of accounts that can potentially be Kerberoasted, as well as assist in removing excess noise that would deter proper alerting of an active attack.&lt;/p&gt;

&lt;h3 id=&quot;extra-credit&quot;&gt;Extra Credit&lt;/h3&gt;
&lt;p&gt;The extremely talented Will Schroder (&lt;a href=&quot;https://twitter.com/harmj0y&quot;&gt;harmj0y&lt;/a&gt;) has an &lt;a href=&quot;https://www.youtube.com/watch?v=SStP2RjVq0I&quot;&gt;awesome video&lt;/a&gt; detailing the ins and outs of Kerberoasting. It includes OPSEC considerations for attackers as well as additional detection and response opportunities such as:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Monitoring Encryption Types in Service Ticket Requests/Responses (Hard)&lt;/li&gt;
  &lt;li&gt;Looking For “Weird” Service Ticket Requests (Hard)&lt;/li&gt;
  &lt;li&gt;Creating a Keroasting Honeypot (Fun)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you’re interesting in diving deeper into the wacky world of Kerberos and detection/response efforts I would highly recommend it.&lt;/p&gt;</content><author><name>Ash</name></author><category term="Tradecraft and Techniques" /><category term="Active Directory" /><category term="Kerberos" /><category term="Networks" /><category term="Impacket" /><summary type="html">Kerberoasting is the attack that keeps on giving for adversaries and penesters alike. First documented in [2014](https://www.youtube.com/watch?v=PUyhlN-E5MU) by [Tim Medin](https://twitter.com/TimMedin), Kerberoasting is a tactic that can be used after an intial compromise to gain access to alternate accounts in an Active Directory domain. It has proven to be extremely potent in environments across the globe, and there's a reason why it's still worth talking about eight years after it's initial (public) discovery. I'll walk through an attack path that closely resembles ones I've used in the wild.</summary></entry><entry><title type="html">An Introduction to Active Directory Enumeration</title><link href="http://localhost:4000/An-Introduction-to-Active-Dreictory-Enumeration/" rel="alternate" type="text/html" title="An Introduction to Active Directory Enumeration" /><published>2022-07-01T00:00:00-04:00</published><updated>2022-07-01T00:00:00-04:00</updated><id>http://localhost:4000/An-Introduction-to-Active-Dreictory-Enumeration</id><content type="html" xml:base="http://localhost:4000/An-Introduction-to-Active-Dreictory-Enumeration/">&lt;p class=&quot;notice--warning&quot;&gt;I originally developed this blog for the &lt;a href=&quot;https://risk3sixty.com/penetration-testing/&quot;&gt;Renegade Labs team&lt;/a&gt; at &lt;a href=&quot;https://risk3sixty.com/&quot;&gt;risk3sixty&lt;/a&gt;, and have cross-posted it here for replication of my personal work.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Mitre ATT&amp;amp;CK Technique&lt;/th&gt;
      &lt;th&gt;ID&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://attack.mitre.org/techniques/T1087/002/&quot;&gt;Account Discovery: Domain Account&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;T1087.002&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Active Directory is a platform that has received plenty of attention from adversaries and operators over the years. It has a rich history of exploitaiton methodologies, and new abuse mechanisms and regularly released by security researchs. Combine these factors with the prevalence that it is encountered within organizations, and you can quickly see why it’s a favorite target for attackers.&lt;/p&gt;

&lt;p&gt;There are a plethora of toolsets, cheatsheets, and enumeration options for Microsoft’s flagship directory service. Let’s outline a few of our favorite tools (hint: BloodHound) one can use to begin enumerating an Active Directory environment.&lt;/p&gt;

&lt;h2 id=&quot;getaduserspy&quot;&gt;GetAdUsers.py&lt;/h2&gt;
&lt;p&gt;We’ll start simple with the often overlooked &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetADUsers.py&lt;/code&gt; toolset which comes with the &lt;a href=&quot;https://github.com/SecureAuthCorp/impacket&quot;&gt;Impacket&lt;/a&gt; library. This tool produces short, succint information about a domain’s users.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/ad_enum/getadusers.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;It’s not much, but sometimes this script can come in handy if you’re in a pinch and do not have the ability to install custom toolsets.&lt;/p&gt;

&lt;h2 id=&quot;ldapdomaindump&quot;&gt;LdapDomainDump&lt;/h2&gt;
&lt;p&gt;Moving on, &lt;a href=&quot;https://github.com/dirkjanm/ldapdomaindump&quot;&gt;LdapDomainDump&lt;/a&gt; written by &lt;a href=&quot;https://twitter.com/_dirkjan&quot;&gt;Dirk-Jan&lt;/a&gt; is a great lightweight toolset that quickly gathers a wide range of useful information about an environment.&lt;/p&gt;

&lt;p&gt;In our lab, we will begin by running it with the following options:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ldapdomaindump -u 'testlab\bob' -p 'Passw0rd!' -at SIMPLE -n 10.0.0.36 dc01.testlab.local 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will authenticate to the domain controller (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dc01.testlab.local&lt;/code&gt;) and issue a series of LDAP queries to gather information about the domain. Once this is completed, multiple output files will be placed within your current working directory:&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/ad_enum/ldapdomaindumpoutput.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Typically during an engagement I’ll use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.html&lt;/code&gt; files to view information. For example, if we open &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;domain_users.html&lt;/code&gt;, we can see a succint listing of each user within the domain, their password flags, description field, and other historical information like the last time they logged on.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/ad_enum/ldapdomaindumphtml.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;The description field in particular may prove to be useful during a penetration test, as in some cases an account’s password is placed within this field when it is created.&lt;/p&gt;

&lt;p&gt;Throughout several engagements, Renegade Labs operators have been able to use output from this tool to highlight attack paths, identify weaknesses within environments’ policy configurations, or gather context for a domain’s administration tendencies prior to further exploitation.&lt;/p&gt;

&lt;h2 id=&quot;bloodhound&quot;&gt;BloodHound&lt;/h2&gt;
&lt;p&gt;BloodHound is a graphical toolset that graphs and maps attack paths between objects in Active Directory. It was created by &lt;a href=&quot;https://twitter.com/_wald0&quot;&gt;_wald0 (Andy Robbins)&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/harmj0y&quot;&gt;harmj0y (Will Schroeder)&lt;/a&gt;, and &lt;a href=&quot;https://twitter.com/CptJesus&quot;&gt;CptJesus (Rohan Vazarkar)&lt;/a&gt; from &lt;a href=&quot;https://twitter.com/specterops&quot;&gt;SpectreOps&lt;/a&gt;, who painstakingly put together an amazing piece of software that is used by defenders and attackers alike.&lt;/p&gt;

&lt;p&gt;So why is it so useful? Well it maps attack paths that otherwise would be extremely difficult to identify much less manage and catalogue at scale.&lt;/p&gt;

&lt;p&gt;It does this by using &lt;strong&gt;Graph Theory&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;“graph theory is the study of &lt;strong&gt;graphs&lt;/strong&gt;, which are mathematical structures used to model pairwise relations between objects. A graph in this context is made up of &lt;strong&gt;vertices&lt;/strong&gt; (also called nodes or points) which are connected by &lt;strong&gt;edges&lt;/strong&gt; (also called links or lines)”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Via: &lt;a href=&quot;https://en.wikipedia.org/wiki/Graph_theory&quot;&gt;https://en.wikipedia.org/wiki/Graph_theory&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;why-is-it-so-useful-why-does-graph-theory-matter&quot;&gt;Why is it so useful? Why does graph theory matter?&lt;/h3&gt;
&lt;p&gt;Take, for example, the following group in Active Directory named “Fax Machine Users”.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/ad_enum/net_group.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We can see that the “bob” user is a member of the group.&lt;/p&gt;

&lt;p&gt;If we take a look at the alternate “Front Desk” group however, we can see that the “Fax Machine Users” group is nested within it. Bob is a member of “Fax Machine Users”, which means he inherits any access rights granted to that group &lt;em&gt;and also&lt;/em&gt; any rights granted to the “Front Desk” group.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/ad_enum/front_desk.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;You might already be able to see how convoluted this can get. Without good PowerShell queries nested group membership is very hard to track, and even if one can identify it visualization of the relationships is strenuous. Now picture an environment with hundereds if not thousands of global groups, one-off access grants to groups and users, and disparate direct local administrative access. It’s a headache-indusing problem to try to track and manage as a security professional.&lt;/p&gt;

&lt;p&gt;Now let’s see what the same configuration looks like in BloodHound:&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/ad_enum/fax_bloodhound.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;A nice illustration of Bob’s node connected to the “Fax Machine Users” node. This is through a “link” (or “edge”) called “MemberOf”, as Bob is a member of the group.&lt;/p&gt;

&lt;p&gt;BloodHound makes the next leap even easier, by demonstrating multiple “edges” between nodes. With this visualization, we can now easily observe that Bob is a member of “Fax Machine Users”, and by extension the “Front Desk” group thanks to nested group membership.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/ad_enum/fax_bloodhound2.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;In fact, we can visualize an entire attack path that may have otherwise been difficult to identify:&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/ad_enum/fax_bloodhound3.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;The “Front Desk” group is nested within the “Physical Security” group, and the “Physical Security” group is nested within the “Security” group. Finally, the “Security” group possesses a “GenericWrite” link to the “Domain Admins” group, effectively creating an attack path from “Bob” to complete control of the domain.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/ad_enum/fax_bloodhound4.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Thus one can see how what may have at first glance appeared to be a simple configuration, a single user within the “Fax Machine Users” group, can turn into an attack path an adversary can follow. It’s worth noting that this configuration traverses a “path” across three nested group memberships. Imagine trying to enumerate this by hand with PowerShell queries or “net group” statements, and you can see why BloodHound is so loved.&lt;/p&gt;

&lt;h3 id=&quot;using-bloodhound&quot;&gt;Using BloodHound&lt;/h3&gt;
&lt;p&gt;There’s a great &lt;a href=&quot;https://bloodhound.readthedocs.io/&quot;&gt;body of documentation&lt;/a&gt; that comes with the tool. Since we usually run the toolset from a Linux environment, we follow the related installation guide &lt;a href=&quot;https://bloodhound.readthedocs.io/en/latest/installation/linux.html&quot;&gt;here&lt;/a&gt;. There are associated guides for each platform one might need to install the toolset on.&lt;/p&gt;

&lt;p&gt;Let’s quickly highlight how we gather information to be used within BloodHound during an engagement. To generate data to import into BloodHound you need to run a BloodHound “ingestor”, which is just a fancy name for a toolset that performs the neccessary queries and formatting of data used by BloodHound.&lt;/p&gt;

&lt;p&gt;There are a few forms of these tools, namely SharpHound which is a compiled executable that can be executed on comrpomised Windows hosts, as well as the Python alternative &lt;a href=&quot;https://github.com/fox-it/BloodHound.py&quot;&gt;BloodHound.py&lt;/a&gt; which is what we will use in this case.&lt;/p&gt;

&lt;p&gt;This ingestor is also written and maintained by the talented &lt;a href=&quot;https://twitter.com/_dirkjan&quot;&gt;Dirk-Jan&lt;/a&gt;, and can be easily installed with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip installed bloodhound&lt;/code&gt;:&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/ad_enum/pip_bloodhound.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;_Note: you may need to update your PATH environment variable to utilize the Python Bloodhound ingestor once it’s installed. If you’re on a Kali environment, the installation process will likely include the binary in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/kali/.local/bin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To add this temporarily to your PATH you can run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;export PATH=$PATH:/home/kali/.local/bin&lt;/code&gt;, although you will likely want to include this in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.zshrc&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.bashrc&lt;/code&gt; file._&lt;/p&gt;

&lt;p&gt;With the Python Ingestor installed, let’s gather some data to import into BloodHound. This can be done by running “Bloodhound.py” (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bloodhound-python&lt;/code&gt; is the program name) with the followinf arguments:
	- &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-u&lt;/code&gt;: username
	- &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-p&lt;/code&gt;: password
	- &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-d&lt;/code&gt;: domain name
	- &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-ns&lt;/code&gt;: name server&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/ad_enum/ingest.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;In our experience, certain options may need to be modified to allow the tool to work. Additionally, there are a suite of “collection methods” that can be controlled with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-c&lt;/code&gt; parameter. You can add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-c all&lt;/code&gt; to the command to ensure that each piece of data is collected.&lt;/p&gt;

&lt;p&gt;If we look in the directory we executed the ingestor from, we should now see a series of JSON files.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/ad_enum/json_output.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We can import these into BloodHound using the “Upload Data” button in the GUI, or by simply dragging and dropping the files into BloodHound.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/ad_enum/import.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Once the data imports, you are ready to start looking around the environment. There are a number of prebuilt queries that ship with the tool. For example, below you can see the output from clicking on the “Find all Domain Admins” query in the tool.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/ad_enum/queries.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;But the analysis does not stop there. There are virtually no limits to the types of information you can gather with custom BloodHound queries. I personally like using the &lt;a href=&quot;https://github.com/CompassSecurity/BloodHoundQueries&quot;&gt;“BloodHoundQueries” repo from Compass Security&lt;/a&gt; in addition to the pre-built ones included with BloodHound.&lt;/p&gt;

&lt;p&gt;And that’s it! Once the tool is configured and data is imported, one can reference it throughout an engagement as certain objectives are met, credentials are compromised, or attack paths need to be discovered.&lt;/p&gt;

&lt;p&gt;This certainly does not do BloodHound, LdapDomainDump, or GetADUsers.py justice, and a more detailed post is warranted to explore all the useful features that they provide. This blog aims to simply outline a few different methods an attacker (or defender) can use to get started enumerating Active Directory environments.&lt;/p&gt;</content><author><name>Ash</name></author><category term="Tradecraft and Techniques" /><category term="Active Directory" /><category term="BloodHound" /><category term="Impacket" /><category term="Networks" /><category term="LDAP" /><summary type="html">Active Directory is a platform that has received plenty of attention from adversaries and operators over the years. It has a rich history of exploitaiton methodologies, and new abuse mechanisms and regularly released by security researchs. Combine these factors with the prevalence that it is encountered within organizations, and you can quickly see why it's a favorite target for attackers. There are a plethora of toolsets, cheatsheets, and enumeration options for Microsoft's flagship directory service. Let's outline a few of our favorite tools (hint: BloodHound) one can use to begin enumerating an Active Directory environment.</summary></entry><entry><title type="html">Attacking the AWS Metadata Service</title><link href="http://localhost:4000/Attacking-the-AWS-Metadata-Service/" rel="alternate" type="text/html" title="Attacking the AWS Metadata Service" /><published>2022-07-01T00:00:00-04:00</published><updated>2022-07-01T00:00:00-04:00</updated><id>http://localhost:4000/Attacking-the-AWS-Metadata-Service</id><content type="html" xml:base="http://localhost:4000/Attacking-the-AWS-Metadata-Service/">&lt;p class=&quot;notice--warning&quot;&gt;I originally developed this blog for the &lt;a href=&quot;https://risk3sixty.com/penetration-testing/&quot;&gt;Renegade Labs team&lt;/a&gt; at &lt;a href=&quot;https://risk3sixty.com/&quot;&gt;risk3sixty&lt;/a&gt;, and have cross-posted it here for replication of my personal work.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Mitre ATT&amp;amp;CK Technique&lt;/th&gt;
      &lt;th&gt;ID&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://attack.mitre.org/techniques/T1552/005/&quot;&gt;Unsecured Credentials: Cloud Instance Metadata API&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;T1552.005&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/aws_metadata/xmind_1.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;The AWS Metadata service facilitiates information access for applications running on a given EC2 instance. This is provided to aid configuration and management of tooling and is accessible only by the instance itself.&lt;/p&gt;

&lt;p&gt;Per &lt;a href=&quot;https://aws.amazon.com/blogs/security/defense-in-depth-open-firewalls-reverse-proxies-ssrf-vulnerabilities-ec2-instance-metadata-service/&quot;&gt;Amazon&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Since it first launched over 10 years ago, the [Amazon EC2](http://aws.amazon.com/ec2) Instance Metadata Service (IMDS) has helped customers build secure and scalable applications. The IMDS solved a big security headache for cloud users by providing access to temporary, frequently rotated credentials, removing the need to hardcode or distribute sensitive credentials to instances manually or programatically.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However, as you may have noticed, the Metadata service possesses one unique characteristic that is useful to attackers. Along with providing information access to the given instance, it also provides &lt;em&gt;credentials&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Why does this matter?&lt;/p&gt;

&lt;p&gt;This effectively means that an attacker who compromised an AWS instance can query the Metadata service for credentials that can be then used for lateral movement to other cloud resources.&lt;/p&gt;

&lt;h2 id=&quot;attack-breakdown&quot;&gt;Attack Breakdown&lt;/h2&gt;
&lt;p&gt;Let’s say an attacker has compromised a host and acquired access using SSH. From a shell, the Metadata service can be accessed using:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl http://169.254.169.254&lt;/code&gt;.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/aws_metadata/curl_1.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;The Metadata service can then be more directly queried through the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/latest/meta-data&lt;/code&gt; path on this URL.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/aws_metadata/curl_2.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;The attacker can request a fresh pair of AWS access keys using the complete path of: 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://169.254.169.254/latest/meta-data/identity-credentials/ec2/security-credentials/ec2-instance&lt;/code&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/aws_metadata/curl_3.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And just like that an attacker has a separate pair of credentials! These keys can be then used for lateral movement after an initial breach or persistence.&lt;/p&gt;

&lt;h2 id=&quot;but-wait-theres-more&quot;&gt;But Wait There’s More&lt;/h2&gt;
&lt;p&gt;So while the first example is only limited to an attacker somehow acquiring a shell on a resource, it is actually not the most realistic attack scenario that exploits the Metadata service.&lt;/p&gt;

&lt;p&gt;Instead, a web application exploitation method known as Server-Side Request Forgery (SSRF) is actually the most likely candidate to grant attackers the ability to target the metadata service.&lt;/p&gt;

&lt;p&gt;The interesting thing about this attack chain is that it immediately shifts the threat model of an organization from their web application environment to their infrastructure. This breaks the common assumption that a web application vulnerability can only impact the application itself. In some cases this can be devastating for an organization should the appropriate variables be in place.&lt;/p&gt;

&lt;h3 id=&quot;ssrf&quot;&gt;SSRF&lt;/h3&gt;
&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/aws_metadata/xmind_2.png&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;To understand how this works, one must know what a SSRF vulnerability looks like. For example, consider a web application hosted on AWS that has the following URL:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://mywebapp.com/images/remote?=http://imgur.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This URL allows the application to load images from disparate locations that are used in the web application. However, an attacker notices this and changes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remote&lt;/code&gt; parameter to an IP address under their control.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://mywebapp.com/images/remote?=http://1.2.3.4 &amp;lt;- malicious IP
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once the new URL is accessed, the attacker checks their server logs and notes a hit from the web application server.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...
&amp;lt;web server IP&amp;gt; - - [03/Jul/2022 07:41:11] &quot;GET / HTTP/1.1&quot; 200 -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a SSRF vulnerability, as the attacker can induce the web application into making requests to unintended resources.&lt;/p&gt;

&lt;p&gt;When chained against web applications that run on AWS, this kind of weakness can be catastrophic. Consider an attacker who takes advantage of the same URL by issuing this request:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://mywebapp.com/images/remote?=http://169.254.169.254/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When this is issued, the web application tries to fetch the “image” and store it in the web application, but in reality fetches a fresh pair of AWS credentials that can be used by the attacker:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;Code&quot; : &quot;Success&quot;,
  &quot;LastUpdated&quot; : &quot;2022-07-03T11:53:44Z&quot;,
  &quot;Type&quot; : &quot;AWS-HMAC&quot;,
  &quot;AccessKeyId&quot; : &quot;ASIAVQ[...snip...]K62GIEE&quot;,
  &quot;SecretAccessKey&quot; : &quot;wK8[...snip...]rX9mvFK&quot;,
  &quot;Token&quot; : &quot;IQoJb[...snip...]1clp9UA==&quot;,
  &quot;Expiration&quot; : &quot;2022-07-03T18:04:22Z&quot;
}  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;mitigation-imdsv2&quot;&gt;Mitigation: IMDSv2&lt;/h2&gt;
&lt;p&gt;AWS has since released Instnace Metadata Service v2 (IMDSv2), which adds an addiitonal layer of protection on the metadata service by requesting session authentication.&lt;/p&gt;

&lt;p&gt;This is achieved by requiring a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PUT&lt;/code&gt; request to be used initially to gather a secret token. This token is then used like a password for performing additional actions with the metadata service, including still requesting credentials.&lt;/p&gt;

&lt;p&gt;Therefore, IMDSv2 does not fix metadata service credential leakage entirely, but rather makes it more difficult to achieve through a generic SSRF vulnerability.&lt;/p&gt;

&lt;p&gt;Alternatively, the metadata service can be completely disabled on EC2 instances, although this remediation path may have drawbacks should your assets utilize the service.&lt;/p&gt;</content><author><name>Ash</name></author><category term="Tradecraft and Techniques" /><category term="AWS" /><category term="Cloud" /><category term="SSRF" /><summary type="html">&quot;Since it first launched over 10 years ago, the [Amazon EC2](http://aws.amazon.com/ec2) Instance Metadata Service (IMDS) has helped customers build secure and scalable applications. The IMDS solved a big security headache for cloud users by providing access to temporary, frequently rotated credentials, removing the need to hardcode or distribute sensitive credentials to instances manually or programatically. &quot; However, as you may have noticed, the Metadata service possesses one unique characteristic that is useful to attackers. Along with providing information access to the given instance, it also provides _credentials_. Why does this matter?</summary></entry><entry><title type="html">Farming Breached Password Data with Dehashed</title><link href="http://localhost:4000/Farming-Breached-Password-Data-With-Dehashed/" rel="alternate" type="text/html" title="Farming Breached Password Data with Dehashed" /><published>2022-07-01T00:00:00-04:00</published><updated>2022-07-01T00:00:00-04:00</updated><id>http://localhost:4000/Farming-Breached-Password-Data-With-Dehashed</id><content type="html" xml:base="http://localhost:4000/Farming-Breached-Password-Data-With-Dehashed/">&lt;p class=&quot;notice--warning&quot;&gt;I originally developed this blog for the &lt;a href=&quot;https://risk3sixty.com/penetration-testing/&quot;&gt;Renegade Labs team&lt;/a&gt; at &lt;a href=&quot;https://risk3sixty.com/&quot;&gt;risk3sixty&lt;/a&gt;, and have cross-posted it here for replication of my personal work.&lt;/p&gt;

&lt;h1 id=&quot;password-breach-data&quot;&gt;Password Breach Data&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Mitre ATT&amp;amp;CK Technique&lt;/th&gt;
      &lt;th&gt;ID&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://attack.mitre.org/techniques/T1110/004/&quot;&gt;Brute Force: Credential Stuffing&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;T1110.004&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Every year countless data breaches occur.&lt;/p&gt;

&lt;p&gt;From &lt;a href=&quot;https://fortune.com/2021/06/30/linkedin-data-theft-700-million-users-personal-information-cybersecurity/&quot;&gt;700 Million LinkedIn users’ information getting leaked  sometime between 2020 and 2021&lt;/a&gt;, to &lt;em&gt;at least&lt;/em&gt; &lt;a href=&quot;https://www.lifelock.com/learn/data-breaches/company-data-breach&quot;&gt;500 million Yahoo accounts information being breached in 2014&lt;/a&gt;, to the notable &lt;a href=&quot;https://en.wikipedia.org/wiki/2017_Equifax_data_breach&quot;&gt;2017 Equifax data breach which impacted millions of individuals&lt;/a&gt;, it’s safe to say that breaches are a part of the everyday news cycle in the present day.&lt;/p&gt;

&lt;p&gt;These breaches contain a wide variety of data that has a variety of use cases. Social security numbers and credit card information can lead to fraud, age information and phone numbers can lead to targeted phishing attacks, and usernames and passwords can lead to… what exactly?&lt;/p&gt;

&lt;p&gt;Have you ever wondered what happens to this data &lt;em&gt;after&lt;/em&gt; it’s leaked? What about the private breaches that are not publicized but rather are sold on forums?&lt;/p&gt;

&lt;p&gt;This dark world is one that’s extremely interesting and often misunderstood. Unfortunately, risk3sixty is not a threat intelligence company, so large knowledge on the breadth of these attacks an their outcomes is out of our wheelhouse. Our friends at &lt;a href=&quot;https://www.recordedfuture.com/&quot;&gt;Recorded Future&lt;/a&gt; however likely have &lt;a href=&quot;https://www.recordedfuture.com/combatting-data-and-credential-exposure-with-intelligence&quot;&gt;more information&lt;/a&gt; that can help answer some of those questions for you.&lt;/p&gt;

&lt;p&gt;With that said, let’s take a step back and look at how penetration testers and adversaries alike take advantage of data breaches during engagements.&lt;/p&gt;

&lt;h2 id=&quot;engagement-process&quot;&gt;Engagement Process&lt;/h2&gt;
&lt;p&gt;On specific targeted engagements, Renegade Labs operators interact with the internet “underworld” that is password breach information. There are a few requirements for this to make sense:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;An organization’s risk profile has to line up with the tactics in use.&lt;/li&gt;
  &lt;li&gt;An organization has to be comfortable with the outcomes of this type of reconaissance&lt;/li&gt;
  &lt;li&gt;An organization may need to be open to password spraying attacks with breach data to ensure that the project provides the most real-world value&lt;/li&gt;
  &lt;li&gt;Lastly, breaches happen. The organization should not punish users for their information being leaked. Often times it is solely out of their control.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To operationalize this process (and keep it as legitimate as possible), we heavily utilize the &lt;a href=&quot;https://www.dehashed.com/&quot;&gt;Dehashed&lt;/a&gt; service for information retrieval.&lt;/p&gt;

&lt;p&gt;Dehashed presents a useful and fairly cost effective API for data retrieval. This allows us to quickly and reliably have a source of data for engagements, instead of trying to keep up with forum posts, leaks, and the ethical headaches that coincide with these efforts.&lt;/p&gt;

&lt;p&gt;To access the Dehashed API, a vali subscription is needed:&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/dehashed/subs.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Additionally, one must purchase API credits to use with their account. For reference, 100 API creds costs only $3.&lt;/p&gt;

&lt;p&gt;Once your account is setup and loaded with valid API credits, the &lt;a href=&quot;https://www.dehashed.com/docs&quot;&gt;API reference documentation&lt;/a&gt; can be used, from which you find a series of options to meet your needs.&lt;/p&gt;

&lt;p&gt;Let’s say we want to query all information Dehashed possesses on a username of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bob&lt;/code&gt;. We can do this through the following Curl request:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl 'https://api.dehashed.com/search?query=username:bob' \
-u 'email:api_key' \
-H 'Accept: application/json'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;: you’ll likely want to write collected output to a file to avoid wasting API credits&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let’s issue the request, and view the output using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jq&lt;/code&gt;. Unfortunately, we really don’t want to leak any information that is sensitive and technically paywalled, so the image below is heavily redacted. What one &lt;em&gt;can&lt;/em&gt; note however are the fields contained within the output:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/dehashed/data.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;The parameters that stand out are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;email&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip_address&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;password&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hashed_password&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our case, the results were limited to 100 entries per the API specification, however there are ways to query more data, which does have pricing implications.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/dehashed/sizing.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And that is how simple it is to use Dehashed to gather data! You might see why it has quickly become one of our favorite services for engagements. Generic queries with information like a simple username of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bob&lt;/code&gt; produce much more information than is useful, but on targeted engagements the data acquired from the service can be highly beneficial.&lt;/p&gt;

&lt;h2 id=&quot;mitigations&quot;&gt;Mitigations&lt;/h2&gt;
&lt;p&gt;From &lt;a href=&quot;https://attack.mitre.org/techniques/T1110/004/&quot;&gt;Mitre&lt;/a&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Mitre ID&lt;/th&gt;
      &lt;th&gt;Mitigation&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://attack.mitre.org/mitigations/M1036&quot;&gt;M1036&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://attack.mitre.org/mitigations/M1036&quot;&gt;Account Use Policies&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Set account lockout policies after a certain number of failed login attempts to prevent passwords from being guessed. Too strict a policy may create a denial of service condition and render environments un-usable, with all accounts used in the brute force being locked-out.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://attack.mitre.org/mitigations/M1032&quot;&gt;M1032&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://attack.mitre.org/mitigations/M1032&quot;&gt;Multi-factor Authentication&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Use multi-factor authentication. Where possible, also enable multi-factor authentication on externally facing services.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://attack.mitre.org/mitigations/M1027&quot;&gt;M1027&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://attack.mitre.org/mitigations/M1027&quot;&gt;Password Policies&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Refer to &lt;a href=&quot;https://pages.nist.gov/800-63-3/sp800-63b.html&quot;&gt;NIST guidelines&lt;/a&gt; when creating password policies.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://attack.mitre.org/mitigations/M1018&quot;&gt;M1018&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://attack.mitre.org/mitigations/M1018&quot;&gt;User Account Management&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>Ash</name></author><category term="Tradecraft and Techniques" /><category term="Password Breaches" /><category term="OSINT" /><summary type="html">Every year countless data breaches occur. From [700 Million LinkedIn users' information getting leaked sometime between 2020 and 2021](https://fortune.com/2021/06/30/linkedin-data-theft-700-million-users-personal-information-cybersecurity/), to _at least_ [500 million Yahoo accounts information being breached in 2014](https://www.lifelock.com/learn/data-breaches/company-data-breach), to the notable [2017 Equifax data breach which impacted millions of individuals](https://en.wikipedia.org/wiki/2017_Equifax_data_breach), it's safe to say that breaches are a part of the everyday news cycle in the present day. These breaches contain a wide variety of data that has a variety of use cases. Social security numbers and credit card information can lead to fraud, age information and phone numbers can lead to targeted phishing attacks, and usernames and passwords can lead to... what exactly?</summary></entry><entry><title type="html">Getting Started Spraying Microsoft Services</title><link href="http://localhost:4000/Getting-Started-Spraying-Microsoft-Services/" rel="alternate" type="text/html" title="Getting Started Spraying Microsoft Services" /><published>2022-07-01T00:00:00-04:00</published><updated>2022-07-01T00:00:00-04:00</updated><id>http://localhost:4000/Getting-Started-Spraying-Microsoft-Services</id><content type="html" xml:base="http://localhost:4000/Getting-Started-Spraying-Microsoft-Services/">&lt;p class=&quot;notice--warning&quot;&gt;I originally developed this blog for the &lt;a href=&quot;https://risk3sixty.com/penetration-testing/&quot;&gt;Renegade Labs team&lt;/a&gt; at &lt;a href=&quot;https://risk3sixty.com/&quot;&gt;risk3sixty&lt;/a&gt;, and have cross-posted it here for replication of my personal work.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Mitre ATT&amp;amp;CK Technique&lt;/th&gt;
      &lt;th&gt;ID&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://attack.mitre.org/techniques/T1110/003/&quot;&gt;Brute Force: Password Spraying&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;T1110.003&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Password spraying is the process of brute-force guessing passwords against a list of accounts either externally or internally. Adversaries use this tactic to attempt to establish initial access within an organization and/or laterally move to alternate identities within a network.&lt;/p&gt;

&lt;p&gt;The process of getting started password spraying is surprisingly easy. This is in part thanks to the prevalence of remote-work solutions that have created the need to allow users to authenticate from &lt;em&gt;pretty much anywhere&lt;/em&gt;. Cloud services such as Office365 actually &lt;em&gt;assist&lt;/em&gt; the password spraying process, by providing a reliable, centralized location that can be used to attempt to breach a company’s accounts.&lt;/p&gt;

&lt;p&gt;To begin, attackers may perform some sort of open-source intelligence gathering to generate a list of users and emails for an organization, that can be later used in password spraying attemtps. In combination with this tactic, weak, seasonal-based (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Summer2022!&lt;/code&gt;) or company-based (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Company123&lt;/code&gt;) passwords are commonly used in stuffing attacks.&lt;/p&gt;

&lt;h1 id=&quot;so-how-does-it-work&quot;&gt;So how does it work?&lt;/h1&gt;
&lt;h2 id=&quot;password-spraying-azure&quot;&gt;Password Spraying Azure&lt;/h2&gt;
&lt;p&gt;Let’s say we are an attacker targeting the ficticious &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;testlab.com&amp;gt;&lt;/code&gt; company. We have a list of target users we’ve skimmed from LinkedIn, and we have a hunch that they use a weak password.&lt;/p&gt;

&lt;p&gt;We’re going to utilize the &lt;a href=&quot;https://github.com/dafthack/MSOLSpray&quot;&gt;MSOLSpray&lt;/a&gt; toolset from Beau Bollock (&lt;a href=&quot;https://twitter.com/dafthack&quot;&gt;@dafthack&lt;/a&gt;) to attempt to login to each of target users with a weak password.&lt;/p&gt;

&lt;p&gt;Getting started using the tool is quite simple. We can open a PowerShell window and download the tool using:&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;wget&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;https://raw.githubusercontent.com/dafthack/MSOLSpray/master/MSOLSpray.ps1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-OutFile&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MSOLSpray.ps1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After which we can import it via:&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Import-Module&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;\MSOLSpray.ps1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We will construct a short list of users to target:&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/spraying_ms/userlist.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And now we can easily spray a login attempt to each account with MSOLSpray.ps1. We’ll use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Summer2022&lt;/code&gt; password, and launch the attack via:&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Invoke-MSOLSpray&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-UserList&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;\Users.txt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Password&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Summer2022&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/spraying_ms/msolspray.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;In our case the ficticious &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;testlab.com&lt;/code&gt; domain does not actually exist, however one can see how quickly spraying attempts can be performed against a target organization.&lt;/p&gt;

&lt;p&gt;This is just one example against a particular service, and multiple options exist that allow attacks to target a suite of applications used by organizations.&lt;/p&gt;

&lt;h2 id=&quot;password-spraying-active-directory&quot;&gt;Password Spraying Active Directory&lt;/h2&gt;
&lt;p&gt;On the internal network side of house, there are a suite of password spraying toolsets to choose from. At Renegade Labs, we particularly like using &lt;a href=&quot;https://github.com/optiv/Talon&quot;&gt;Talon&lt;/a&gt; from &lt;a href=&quot;https://www.optiv.com/&quot;&gt;Optiv&lt;/a&gt;. It’s very flexible, written in Golang, and portable to multiple platforms.&lt;/p&gt;

&lt;p&gt;Let’s shift gears and say we’re within an internal network and want to spray passwords. We’ll start by grabbing a fresh copy of Talon and constructing a userlist:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;## Download Talon and make it executable&lt;/span&gt;
wget https://github.com/optiv/Talon/releases/download/v3.0/Talon_3.0_linux_amd64
&lt;span class=&quot;nb&quot;&gt;mv &lt;/span&gt;Talon_3.0_linux_amd64 Talon &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x Talon

&lt;span class=&quot;c&quot;&gt;## Construct a users list&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;users.txt
bob
mike
cindy
cheryl
jim
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we can begin spraying passwords. Talon possesses a wide suite of options that allows an operator to heavily modify how they would like to spray passwords, but for our purposes lets simply issue one round of spraying with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Passw0rd!&lt;/code&gt; password.&lt;/p&gt;

&lt;p&gt;We can do so using the following command:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./Talon -D testlab.local -H 10.0.0.36 -Userfile users.txt -P 'Passw0rd!' -K
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/spraying_ms/talon.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;From the generated spraying attempts, we can see that this password is set for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bob&lt;/code&gt; account, allowing us to authenticate as that identity and inherit their access. This is how quickly a penetration tester (or attacker) can spin up password spraying attempts after initial access is achieved.&lt;/p&gt;

&lt;h2 id=&quot;mitigation-password-policy-reigns-supreme&quot;&gt;Mitigation: Password Policy Reigns Supreme&lt;/h2&gt;
&lt;p&gt;On the defensive side of house, there is one direct and fullproof mitigation that still stands the test of time: the password policy. While regular password rotation is important, we cannot place enough emphasis on enforcing the &lt;em&gt;strength&lt;/em&gt; of passwords that are set.&lt;/p&gt;

&lt;p&gt;A 14 character, highly-complex password that is set for a year is much more valuable than an eight character password that changes every 60 days. In most cases all this achieves is incrementing a number by one (Passw0rd1 -&amp;gt; Passw0rd2) or changing a slight detail to get pass policy requirements.&lt;/p&gt;

&lt;p&gt;In addition to password policies, organizations should pursue utilization of MFA. This should be prioritized especially for all methods of an end user logging into resources externally, or in other words from the public internet. In most cases this is for systems such as a VPN solution, email (Google Mail/Outlook), messaging platforms (looking at you Slack), or other systems that could be used for further information gathering and pretext-based social engineering (HR systems/finance applications/note taking applications).&lt;/p&gt;

&lt;p&gt;There are a series of application-specific protections that we could go into to try to limit password spraying on a case-by-case basis, but this blog aims to simply shed light on the process of password spraying and how easy it is to get started as an attacker. So, go setup MFA, and use good passwords!&lt;/p&gt;</content><author><name>Ash</name></author><category term="Tradecraft and Techniques" /><category term="Active Directory" /><category term="Password Spraying" /><category term="OSINT" /><category term="Office365" /><summary type="html">Password spraying is the process of brute-force guessing passwords against a list of accounts either externally or internally. Adversaries use this tactic to attempt to establish initial access within an organization and/or laterally move to alternate identities within a network. The process of getting started password spraying is surprisingly easy. This is in part thanks to the prevalence of remote-work solutions that have created the need to allow users to authenticate from _pretty much anywhere_. Cloud services such as Office365 actually _assist_ the password spraying process, by providing a reliable, centralized location that can be used to attempt to breach a company's accounts.</summary></entry><entry><title type="html">I Love ScoutSuite and You Should Too</title><link href="http://localhost:4000/I-Love-ScoutSuite-and-You-Should-Too/" rel="alternate" type="text/html" title="I Love ScoutSuite and You Should Too" /><published>2022-07-01T00:00:00-04:00</published><updated>2022-07-01T00:00:00-04:00</updated><id>http://localhost:4000/I-Love-ScoutSuite-and-You-Should-Too</id><content type="html" xml:base="http://localhost:4000/I-Love-ScoutSuite-and-You-Should-Too/">&lt;p class=&quot;notice--warning&quot;&gt;I originally developed this blog for the &lt;a href=&quot;https://risk3sixty.com/penetration-testing/&quot;&gt;Renegade Labs team&lt;/a&gt; at &lt;a href=&quot;https://risk3sixty.com/&quot;&gt;risk3sixty&lt;/a&gt;, and have cross-posted it here for replication of my personal work.&lt;/p&gt;

&lt;h1 id=&quot;scoutsuite&quot;&gt;ScoutSuite&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/nccgroup/ScoutSuite&quot;&gt;ScoutSuite&lt;/a&gt; is a multi-cloud security auditing tool written by the wonderful folks over at &lt;a href=&quot;https://www.nccgroup.com/us/&quot;&gt;NCC group&lt;/a&gt;. I use it heavily, so I wanted to do a quick guide on getting it configured and running it in your own environment.&lt;/p&gt;

&lt;p&gt;The data and reports it generates is extremely useful from both an offensive and defensive perspective, and I trust that you’ll feel the same way after using it in your own platform.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;
&lt;p&gt;Installation is quite simple, start by creating a new python virtual environment:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;virtualenv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;python3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;## Activate venv
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt; to install ScoutSuite:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scoutsuite&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;aws&quot;&gt;AWS&lt;/h3&gt;
&lt;p&gt;For AWS, you will need to configure your AWS access keys in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.aws/credentials&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[default]
aws_access_key_id = [REDACTED]
aws_secret_access_key = [REDACTED]

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;azure&quot;&gt;Azure&lt;/h3&gt;
&lt;p&gt;For Azure, a &lt;a href=&quot;https://github.com/nccgroup/ScoutSuite/wiki/Azure&quot;&gt;series of authentication options exist&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;gcp&quot;&gt;GCP&lt;/h3&gt;
&lt;p&gt;Google Cloud Platform has two ways to authenticate with ScoutSuite:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;User Account&lt;/li&gt;
  &lt;li&gt;Service Account&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While we’ve had success with the second option, we recommend &lt;a href=&quot;https://github.com/nccgroup/ScoutSuite/wiki/Google-Cloud-Platform&quot;&gt;referring to the documentation&lt;/a&gt; for more info.&lt;/p&gt;

&lt;h2 id=&quot;reporting&quot;&gt;Reporting&lt;/h2&gt;

&lt;p&gt;Once executed, the tool will generate a list of findings broken out by service:&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/scoutsuite/report_1.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;One can drill down further into these as well, revealing more information on each finding and reference information:&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
	&lt;img src=&quot;/assets/images/scoutsuite/report_1.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;And that’s it! It’s that simple to run. In 5 minutes you can get a broad overview of your cloud environment and its security configurations.&lt;/p&gt;

&lt;p&gt;I would recommend running the toolset against any and all cloud platforms you have. It’s free, what do you have to lose?&lt;/p&gt;</content><author><name>Ash</name></author><category term="Tradecraft and Techniques" /><category term="Cloud" /><category term="AWS" /><category term="Azure" /><category term="GCP" /><summary type="html">[ScoutSuite](https://github.com/nccgroup/ScoutSuite) is a multi-cloud security auditing tool written by the wonderful folks over at [NCC group](https://www.nccgroup.com/us/). I use it heavily, so I wanted to do a quick guide on getting it configured and running it in your own environment. The data and reports it generates is extremely useful from both an offensive and defensive perspective, and I trust that you'll feel the same way after using it in your own platform.</summary></entry><entry><title type="html">Passing the Hash for Fun and Profit</title><link href="http://localhost:4000/Passing-the-Hash-For-Fun-and-Profit/" rel="alternate" type="text/html" title="Passing the Hash for Fun and Profit" /><published>2022-07-01T00:00:00-04:00</published><updated>2022-07-01T00:00:00-04:00</updated><id>http://localhost:4000/Passing-the-Hash-For-Fun-and-Profit</id><content type="html" xml:base="http://localhost:4000/Passing-the-Hash-For-Fun-and-Profit/">&lt;p class=&quot;notice--warning&quot;&gt;I originally developed this blog for the &lt;a href=&quot;https://risk3sixty.com/penetration-testing/&quot;&gt;Renegade Labs team&lt;/a&gt; at &lt;a href=&quot;https://risk3sixty.com/&quot;&gt;risk3sixty&lt;/a&gt;, and have cross-posted it here for replication of my personal work.&lt;/p&gt;

&lt;h1 id=&quot;pass-the-hash&quot;&gt;Pass the Hash&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Mitre ATT&amp;amp;CK Technique&lt;/th&gt;
      &lt;th&gt;ID&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://attack.mitre.org/techniques/T1550/002/&quot;&gt;Use Alternate Authentication Material: Pass the Hash&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;T1550.002&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;what-is-it&quot;&gt;What is it?&lt;/h1&gt;
&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/pth/mindmap.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Passing the hash is a technique that adversaries commonly use within an internal network environment to laterally move across hosts.&lt;/p&gt;

&lt;p&gt;Let’s say that an adversary has compromised an initial host through a phishing email contianing malware. What they may pursue is elevating their access on the initially compromised host, from which hashed credentials stored on the asset can be dumped.&lt;/p&gt;

&lt;p&gt;If you’re familiar with tools like Mimikatz, that is where it would likely come into play.&lt;/p&gt;

&lt;h2 id=&quot;so-why-does-this-matter&quot;&gt;So why does this matter?&lt;/h2&gt;
&lt;p&gt;The ability for an attacker to collect and use a hashed password opens up many possibilities for lateral movement. This is because these hashes can actually be &lt;em&gt;directly used&lt;/em&gt; to reach other services. That’s right, an adversary does not need to crack the hashes offline with an expensive password cracking rig, they can just directly authenticate using the hash.&lt;/p&gt;

&lt;h2 id=&quot;breaking-down-the-hash&quot;&gt;Breaking down the hash&lt;/h2&gt;
&lt;p&gt;We’ve already said &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hash&lt;/code&gt; far too many times, so let’s break down what one typically looks like. Most commonly, hashes in Windows environments come in the form of NTLM hashes.&lt;/p&gt;

&lt;p&gt;Here’s an example of an NTLM hash I dumped from my lab:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aad3b435b51404eeaad3b435b51404ee:fc525c9683e8fe067095ba2ddc971889
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In reality, what you’re looking at is actually two hashes, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LM&lt;/code&gt; hash and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NT&lt;/code&gt; hash, separated by a colon.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;				LM								NT
aad3b435b51404eeaad3b435b51404ee:fc525c9683e8fe067095ba2ddc971889
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In most modern environments, LM hashing is disabled due to being significantly weaker than it’s NT counterpart. In fact, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aad3b435b51404eeaad3b435b51404ee&lt;/code&gt; string in the example above is actually the value placed within an empty LM hash. This cannot be used to authenticate to services.&lt;/p&gt;

&lt;p&gt;The NT hash on the other hand is where the fun happens.&lt;/p&gt;

&lt;h2 id=&quot;passing-our-way-to-victory&quot;&gt;Passing our way to victory&lt;/h2&gt;
&lt;p&gt;With an NT hash, we can officially begin authenticating to services. Let’s say we have compromised a host and dumped hashes stored within its SAM database. Within it we find the following (hypothetical) values:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Username: bob
NT Hash: fc525c9683e8fe067095ba2ddc971889
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can now utilize CrackMapExec to attempt to authenticate to a remote host’s SMB service using these credentials.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/pth/pth_1.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We note the successful output, which means that the credentials are valid and we have now authenticated to the remote host as bob. It’s that easy.&lt;/p&gt;

&lt;p&gt;What are the implications of this? If Bob possesses specific access to a remote host the attacker now inherits and can abuse that access. Even if this is not the case, at a minimum specific information about the domain can be queried. For example, we can view the domain’s password policy using CrackMapExec’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--pass-pol&lt;/code&gt; flag.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/pth/pth_2.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;To continue our example, let’s say we have a hunch that the organization likes to reuse passwords. We can attempt to pass this &lt;em&gt;same&lt;/em&gt; hash to a remote host, this time as the Administrator user instead. Since a password -&amp;gt; hash is 1:1, passing the hash allows us to inadvertantly test for password reuse as well!&lt;/p&gt;

&lt;p&gt;We will again use CrackMapExec for this, this time attempting to execute the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;whoami&lt;/code&gt; command upon a successful connection, which requres administrative access.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/pth/pth_3.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We find that the passwords are reused, and we inherit the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Admnistrator&lt;/code&gt; user’s access! At this point we effectively control the domain, and can dump hashes stored on the domain controller.&lt;/p&gt;

&lt;h3 id=&quot;flexibility&quot;&gt;Flexibility&lt;/h3&gt;
&lt;p&gt;Passing the hash is not limited to only the SMB protocol. It can be used to authenticate to LDAP, WinRM, and even Remote Desktop Protocol.&lt;/p&gt;

&lt;p&gt;In this case, we’ll use the NT hash for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Administrator&lt;/code&gt; user, and authenticate to the domain controller on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10.0.0.36&lt;/code&gt; using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xfreerdp&lt;/code&gt; toolset.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/pth/pth_4.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;We are then presented with a fully functional session, and can perform post-exploitation activity as needed on the host.&lt;/p&gt;

&lt;h2 id=&quot;how-do-i-stop-it&quot;&gt;How do I stop it?&lt;/h2&gt;

&lt;h3 id=&quot;protected-users-group&quot;&gt;Protected Users Group&lt;/h3&gt;
&lt;p&gt;At a minimum, it is highly recommended to include administrative users within the Protected Users group in Active Directory. This will disable NTLM authentication for these accounts, mitigating the abiltiy to use the NT hash for authentication.&lt;/p&gt;

&lt;p&gt;If it is possible, this can be pursued for all domain users, however this is effectively disabling NTLM authentication within the environment, which may have negative consequences depending on your use cases.&lt;/p&gt;

&lt;h3 id=&quot;separate-administrative-and-regular-accounts&quot;&gt;Separate Administrative and Regular Accounts&lt;/h3&gt;
&lt;p&gt;To limit the caching of high-privilege credentials on hosts, separate administrative and regular accounts should be implemented. The idea is that administrative credentials are separate (do not share the same password) and are only used to administer mission critical systems that possess additional compensating controls (heavy monitoring, EDR/AV, strenuous access control, network segregation from hosts that are more likely to get “popped”).&lt;/p&gt;

&lt;p&gt;The low-privilege account should be used by staff for all other purposes so as to limit an attacker’s ability to immediately gain critical access after a successful hashdump.&lt;/p&gt;

&lt;h3 id=&quot;disable-local-administrative-access&quot;&gt;Disable Local Administrative Access&lt;/h3&gt;
&lt;p&gt;The ability for an attacker to quickly dump hashes on a local endpoint is greatly limited when the access they inherit is not already administrative in nature.&lt;/p&gt;

&lt;p&gt;Ideally, end users should not recieve local administrative access to their workstation. All neccessary software packages can come pre-installed and a help desk system can be put in place for any after-care needs. This configuration greatly reduces the risk of credential dumping after a successful compromise, and assists with other security controls as well.&lt;/p&gt;</content><author><name>Ash</name></author><category term="Tradecraft and Techniques" /><category term="Active Directory" /><category term="Windows" /><category term="NTLM" /><category term="Pass the hash" /><category term="Networks" /><summary type="html">Windows is cool because the hashes of passwords can actually be _directly used_ to authenticate to services. That's right, an adversary does not need to crack the hashes of passwords offline with an expensive password cracking rig, they can just directly authenticate using the hash. This technique is often called passing-the-hash, and we will explore a few methods you can use to perform this lateral movement technique.</summary></entry><entry><title type="html">Using cloud_enum to Find S3 Buckets and More</title><link href="http://localhost:4000/Using-cloud_enum-to-find-S3-buckets-and-more/" rel="alternate" type="text/html" title="Using cloud_enum to Find S3 Buckets and More" /><published>2022-07-01T00:00:00-04:00</published><updated>2022-07-01T00:00:00-04:00</updated><id>http://localhost:4000/Using-cloud_enum-to-find-S3-buckets-and-more</id><content type="html" xml:base="http://localhost:4000/Using-cloud_enum-to-find-S3-buckets-and-more/">&lt;p class=&quot;notice--warning&quot;&gt;I originally developed this blog for the &lt;a href=&quot;https://risk3sixty.com/penetration-testing/&quot;&gt;Renegade Labs team&lt;/a&gt; at &lt;a href=&quot;https://risk3sixty.com/&quot;&gt;risk3sixty&lt;/a&gt;, and have cross-posted it here for replication of my personal work.&lt;/p&gt;

&lt;h1 id=&quot;s3-buckets&quot;&gt;S3 Buckets&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Mitre ATT&amp;amp;CK Technique&lt;/th&gt;
      &lt;th&gt;ID&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://attack.mitre.org/techniques/T1530/&quot;&gt;Data from Cloud Storage Object&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;T1530&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;buckets&quot;&gt;Buckets?&lt;/h2&gt;
&lt;p&gt;S3, first introduced in 2006, is one of Amazon Web Services’ most popular services. This simple and fast cloud object solution has undoubtely made development, file sharing, content-delivery, and much more seamless for its users across the years. However, this flexibiltiy and arguably confusing design has led to some of the biggest data breaches ever seen.&lt;/p&gt;

&lt;h3 id=&quot;buckets-are-bad&quot;&gt;Buckets are bad?&lt;/h3&gt;
&lt;p&gt;Buckets are not bad by themself, but they sure can lead to issues. Just in 2022, the following data breaches have occurred thanks to misconfigured S3 buckets:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://portswigger.net/daily-swig/insecure-amazon-s3-bucket-exposed-personal-data-on-500-000-ghanaian-graduates&quot;&gt;500,000 Ghanaian graduates personal data leaked by S3 bucket&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://securityaffairs.co/wordpress/126258/data-breach/sega-europe-aws-s3-bucket-data-leak.html&quot;&gt;SEGA S3 bucket with AWS credentials and PII left open&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is in no way a conclusive list, in fact there are multiple different &lt;a href=&quot;https://www.hackmageddon.com/2022/02/21/leaky-buckets-in-2022/&quot;&gt;sites&lt;/a&gt; and &lt;a href=&quot;https://github.com/nagwww/s3-leaks&quot;&gt;repos&lt;/a&gt; that have attempted to catalogue each S3 bucket data breach. I would not want to try to keep up with the pace.&lt;/p&gt;

&lt;h2 id=&quot;how-does-this-happen&quot;&gt;How does this happen?&lt;/h2&gt;
&lt;p&gt;The issue arises when S3 buckets are set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Public&lt;/code&gt;. This allows any user to access the contents stored within the bucket at their will. Development life cycles may forget about test buckets that are used during sprints, or in other cases applications utilize the same bucket for multiple purposes, such as content delivery for an application &lt;em&gt;as well as&lt;/em&gt; storage of the sensitive data an application utilizes.&lt;/p&gt;

&lt;p&gt;These environmental variables are the reason that so many issues have come to light over the years with S3 buckets leaking information, and I would argue &lt;em&gt;it’s not entirely the userbase’s fault.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the article &lt;a href=&quot;https://www.upguard.com/blog/s3-security-is-flawed-by-design&quot;&gt;S3 Security Is Flawed By Design&lt;/a&gt;, Kaushik Sen makes the argument that S3 is a victim of its own success. It’s hard to roll out intrinsic changes to one of the most utilized services on the entire AWS platform.&lt;/p&gt;

&lt;p&gt;He proposes that S3 should be split into two separate services to  avoid ambiguity on &lt;em&gt;what exactly S3 it should be used for.&lt;/em&gt; These are:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;1. **Amazon Web Hosting** - designed to host public websites, this storage solution would always be public.

2. **Amazon Private Storage** - designed to hold any data you wouldn't want posted on the Internet, this storage is always private and cannot be accessed directly over the Internet.&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the meantime however, we still need to protect and secure this service. So how do attackers and security researchers locate these buckets? Let’s walk through some enumeration tactics we’ve used historically at Renegade Labs.&lt;/p&gt;

&lt;h3 id=&quot;searching-for-open-s3-buckets&quot;&gt;Searching for Open S3 Buckets&lt;/h3&gt;
&lt;h4 id=&quot;cloud_enum&quot;&gt;Cloud_enum&lt;/h4&gt;
&lt;p&gt;One of our go to tools for enumerating S3 buckets (and all sorts of cloud resources) is a tool called &lt;a href=&quot;https://github.com/initstring/cloud_enum&quot;&gt;cloud_enum&lt;/a&gt; from &lt;a href=&quot;https://github.com/initstring&quot;&gt;initstring&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can grab a fresh copy of the tool and install it via:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/initstring/cloud_enum 
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;cloud_enum
virtualenv &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; python3 &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; 
&lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;bin/activate
pip3 &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; requirements.txt

&lt;span class=&quot;c&quot;&gt;## Run it!&lt;/span&gt;
python3 cloud_enum.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once installed, the tool is very simple to use, with the operator only needing to supply a target organization via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-k KEYWORD&lt;/code&gt; argument.&lt;/p&gt;

&lt;p&gt;In our demonstration, let’s target &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;contoso&lt;/code&gt;.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/cloud_enum/cloud_enum_1.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;In a short period of time (44 seconds!) we’ve identified a series of S3 buckets, all thanks to cloud_enum. It performs this by searching a series of mutations and brute-force options, searching for buckets with similar names to our keyword. We’ve found great success with this in the wild, in some cases gathering an extremely useful list of S3 buckets.&lt;/p&gt;

&lt;p&gt;In this case however, each bucket is “protected”, meaning it is not open to the public and cannot be listed. Or can it?&lt;/p&gt;

&lt;h4 id=&quot;any-authenticated-users&quot;&gt;“Any Authenticated Users”&lt;/h4&gt;
&lt;p&gt;S3 Access Control Lists introduce the ability for a user to grant bucket access to the &lt;a href=&quot;https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html&quot;&gt;“Authenticated Users group”&lt;/a&gt;. What is this group you ask? Well, it’s &lt;em&gt;any individual with valid AWS credentials.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For example, while I cannot access &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://contoso.s3.amazonaws.com&lt;/code&gt; with my web browser, if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Authenticated Users group&lt;/code&gt; has been granted access to the bucket, &lt;em&gt;I can actually potentially query and gather stored within the bucket.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In a piece of functionality that feels oddly similar to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Domain Users&lt;/code&gt; group in Active Directory, this configuration can create immense risk for an organization, and allow their buckets to essentially be public without them even realizing.&lt;/p&gt;

&lt;p&gt;So how does an attacker enumerate for this? It’s actually quite simple. With valid AWS credentials configured and the AWS CLI installed, a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws s3 ls&lt;/code&gt; command can be used to attempt to list a bucket’s contents.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;aws s3 &lt;span class=&quot;nb&quot;&gt;ls &lt;/span&gt;s3://contoso                                                                                                       
An error occurred &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;AccessDenied&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; when calling the ListObjectsV2 operation: Access Denied
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Fortunately, this bucket was not configured with the “Authenticated Users group” (we wouldn’t have included it otherwise), nullifying this attack.&lt;/p&gt;

&lt;p&gt;Despite this, situations do arise from time to time where this configuration can be taken advantage of.&lt;/p&gt;

&lt;p&gt;It’s safe to say that S3 is not going anywhere, and who knows when AWS will opt to make intrinsic changes to the service. There have been several answers implemented by AWS to attempt to address the data breaches that have occurred through the service, but it is not an issue that will likely be eliminated within the future.&lt;/p&gt;</content><author><name>Ash</name></author><category term="Tradecraft and Techniques" /><category term="AWS" /><category term="S3" /><category term="Cloud" /><category term="OSINT" /><summary type="html">S3, first introduced in 2006, is one of Amazon Web Services' most popular services. This simple and fast cloud object solution has undoubtely made development, file sharing, content-delivery, and much more seamless for its users across the years. However, this flexibiltiy and arguably confusing design has led to some of the biggest data breaches ever seen. With this in mind, let's walk through why I like using cloud_enum to find S3 buckets and other goodies.</summary></entry><entry><title type="html">Harnessing the Power of LinkedIn and Talon for Password Spraying</title><link href="http://localhost:4000/Harnessing-the-power-of-LinkedIn-and-Talon-for-Password-Spraying/" rel="alternate" type="text/html" title="Harnessing the Power of LinkedIn and Talon for Password Spraying" /><published>2022-02-28T00:00:00-05:00</published><updated>2022-02-28T00:00:00-05:00</updated><id>http://localhost:4000/Harnessing-the-power-of-LinkedIn-and-Talon-for-Password-Spraying</id><content type="html" xml:base="http://localhost:4000/Harnessing-the-power-of-LinkedIn-and-Talon-for-Password-Spraying/">&lt;p&gt;Internal network password spraying is something I’ve always approached with a lot of caution.&lt;/p&gt;

&lt;p&gt;If not done correctly, you have the potential for:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Exorbitant network activity and alerts&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Compromised ability for employees to do their job&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;And most of all, locked out accounts (scary)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/optiv/Talon&quot;&gt;Talon&lt;/a&gt;, written by the extremely talented &lt;a href=&quot;https://twitter.com/Tyl0us&quot;&gt;Tylous&lt;/a&gt;, is a really cool tool that helps eliminate some of the blind spots encountered when spraying Active Directory services on an internal network engagement. When combined with the treasure-trove that is LinkedIn, it makes for a really great experience during testing.&lt;/p&gt;

&lt;p&gt;Talon is especially great because it:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Is written in Go&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Supports Kerberos &lt;strong&gt;and&lt;/strong&gt; LDAPS&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Is highly flexible&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Rotates traffic between targets&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Can enumerate if users exist &lt;strong&gt;without locking them out&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://www.optiv.com/insights/source-zero/blog/digging-your-talons-new-take-password-guessing&quot;&gt;associated blog post&lt;/a&gt; for more info on how it works and all the hard work put into it.&lt;/p&gt;

&lt;h2 id=&quot;lets-get-a-user-list&quot;&gt;Let’s Get a User List&lt;/h2&gt;
&lt;p&gt;We’ll assume we’ve been dropped on a network with little to no knowledge and we need a list of employee accounts that we can password spray.&lt;/p&gt;

&lt;p&gt;I like to use &lt;a href=&quot;https://github.com/initstring/linkedin2username&quot;&gt;linkedin2username&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/init_string&quot;&gt;initstring&lt;/a&gt;, which scrapes all the employees attached to an organization’s LinkedIn page to collect information. This information comes in the form of neatly structured lists of employee names in a couple different permutations. For example, if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;John Doe&lt;/code&gt; works at a target company I’ll get a listing of him (and all his coworkers) in the format of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;john.doe&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;j.doe&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;johnd&lt;/code&gt;, and so on.&lt;/p&gt;

&lt;p&gt;To begin, grab the company name from the target company’s LinkedIn profile page. It should look something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://linkedin.com/company/contoso12345/&lt;/code&gt;. That last bit (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;contoso12345&lt;/code&gt;) is what we’re looking for.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Next, clone a fresh copy of linkedin2username and scrape the company’s page:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/initstring/linkedin2username

&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;linkedin2username

&lt;span class=&quot;c&quot;&gt;## Note &amp;lt;username&amp;gt; is your LinkedIn username&lt;/span&gt;
python3 linkedin2username.py &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &amp;lt;username&amp;gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &amp;lt;company&amp;gt;

&lt;span class=&quot;c&quot;&gt;## Output is here&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;li2u-output
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here’s me running the tool on our target &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;contoso12345&lt;/code&gt;:&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/misc/linkedin_talon/linkedin2username.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;The complete output will produce a couple lists in different formats that we can use internally.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/misc/linkedin_talon/enumoutput.png&quot; /&gt;
&lt;/p&gt;

&lt;h4 id=&quot;errors&quot;&gt;Errors&lt;/h4&gt;
&lt;p&gt;So, full disclosure, &lt;strong&gt;LinkedIn is weird&lt;/strong&gt;. I had issues running this from a host I usually don’t access LinkedIn on, and you might experience a series of different errors using the tool. You’re ultimately at the mercy of how LinkedIn governs its platform.&lt;/p&gt;

&lt;p&gt;I wouldn’t expect a given enumeration tool to work for an extensive period, so it’s probably a good idea to keep tabs on tooling as it’s released and things change.&lt;/p&gt;

&lt;p&gt;One can always use alternate toolsets to achieve the same result. This may require some bash magic to get things in the correct format, which is why I currently prefer linkedin2username. Here are some additional tools to look at:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/vysecurity/LinkedInt&quot;&gt;LinkedInt&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/blackhatethicalhacking/linkedin_scraper&quot;&gt;LinkedIn Scraper&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/eracle/linkedin&quot;&gt;Linkedin Automation scraper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;talon&quot;&gt;Talon&lt;/h2&gt;
&lt;p&gt;Now I’ll typically grab my generated user lists and begin enumeration with Talon.&lt;/p&gt;

&lt;p&gt;Talon will take a list of users and do two things:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Enumerate if they exist&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Perform a password spray&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I added some additional logic that allows a list of passwords to be specified along with some timing controls I’ll explain later. That way you can setup the tool and let it go, making sure to periodically check back between cycles, thus protecting your precious fingers from the strain of strenuously running a spray one-by-one.&lt;/p&gt;

&lt;p&gt;&lt;del&gt;You can grab my forked version &lt;a href=&quot;https://github.com/0xAsh/Talon&quot;&gt;here&lt;/a&gt;. Almost all of the functionality overlaps (I’ll tell you when it doesn’t).&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Update&lt;/em&gt;: My changes &lt;a href=&quot;https://github.com/optiv/Talon/pull/2&quot;&gt;have been  merged&lt;/a&gt; into the master version of Talon.&lt;/p&gt;

&lt;h4 id=&quot;installation&quot;&gt;Installation&lt;/h4&gt;
&lt;p&gt;To install Talon, perform the following (with Go already installed):&lt;/p&gt;
&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;//github.com/Optiv/Talon&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Talon&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;##&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dependencies&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fatih&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gopkg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jcmturner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gokrb5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gopkg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jcmturner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gokrb5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gopkg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jcmturner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gokrb5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iana&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;etypeID&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gopkg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ldap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;##&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Build&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Talon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;domain-controllers&quot;&gt;Domain Controllers&lt;/h4&gt;
&lt;p&gt;Talon’s functionality includes the ability to specify multiple domain controllers to target for enumeration. This will distribute any generated alerts between hosts. You can control this via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Hostfile&lt;/code&gt; argument, which takes a file containing a newline-delimited list of hosts as an argument.&lt;/p&gt;

&lt;p&gt;How you get this information is up to you, and will likely vary, but a good place to start is by enumerating hosts using &lt;strong&gt;CrackMapExec&lt;/strong&gt; and looking for hostnames containing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DC&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;crackmapexec smb &amp;lt;targets&amp;gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; crackmapexec_enum.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;enumeration&quot;&gt;Enumeration&lt;/h4&gt;
&lt;p&gt;For our purposes I’ve setup the following users in my lab:&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/misc/linkedin_talon/users.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Let’s say that these users are somewhere within our &lt;strong&gt;linkedin2username&lt;/strong&gt; output, along with some other false entries. We will take our list of target domain controllers, and begin detecting valid users:&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;./&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Talon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Userfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username_file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hostfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DC_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;O&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output_file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;notice--primary&quot;&gt;&lt;strong&gt;Note&lt;/strong&gt;: I would heavily recommend always running Talon with an output file specified with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-O&lt;/code&gt; argument.&lt;/p&gt;

&lt;p&gt;In my lab this looks like the following:&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/misc/linkedin_talon/talonenum.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;As you can see it detected the valid users from our listing. We can generate a new list of valid users with the following bash command:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;User Exist&quot;&lt;/span&gt; &amp;lt;output_file&amp;gt; | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; 2 | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;:&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;spraying&quot;&gt;Spraying&lt;/h4&gt;
&lt;p&gt;With our generated list of valid users, let’s run a single password spray with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Password1!&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;./&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Talon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Userfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username_file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hostfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DC_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;O&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output_file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Password1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And in the lab environment:&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/misc/linkedin_talon/pwdspray.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Each password spraying attempt was successful, as each account used a password of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Password1!&lt;/code&gt;.&lt;/p&gt;

&lt;p class=&quot;notice--primary&quot;&gt;&lt;strong&gt;Note&lt;/strong&gt;: You can instruct Talon to only utilize Kerberos or LDAPS for enumeration. This can be performed via:&lt;br /&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-L&lt;/code&gt; for LDAPS&lt;br /&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-K&lt;/code&gt; for Kerberos&lt;/p&gt;

&lt;h4 id=&quot;additional-functionality&quot;&gt;Additional Functionality&lt;/h4&gt;
&lt;p&gt;Here are the additional options within Talon to automate this process:&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Extra&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Usage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;./&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Talon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;float&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Authentication&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attempts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;per&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lockout&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;period&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lockout&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;float&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lockout&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;period&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minutes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Passfile&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;containing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passwords&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This allows you to give the tool a list of passwords it will iterate through every defined number of minutes specified by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Lockout&lt;/code&gt; parameter. You can control the number of authentication attempts made per period of testing via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-A&lt;/code&gt; (attempts) parameter.&lt;/p&gt;

&lt;p&gt;So let’s say we have our list of valid users, a password list, and we want to perform three password attempts every 70 minutes. We can now automate the entire process of password spraying through the following:&lt;/p&gt;
&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;./&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Talon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Userfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username_file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Passfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password_file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lockout&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;70&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hostfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DC_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;O&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output_file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In my lab:&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/misc/linkedin_talon/pwdlistspray.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;You’ll notice additional timestamping within the output, as well as a notification of when the next attempt cycle will occur.&lt;/p&gt;

&lt;p&gt;As we progressed through a password list, eventually we hit the same password found earlier, and achieved a successful login to the target accounts.&lt;/p&gt;

&lt;p&gt;Meanwhile if we look at the logs on the DC we can see a series of &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4625&quot;&gt;4625: An account failed to log on.&lt;/a&gt; events. Not exactly quiet behavior.&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/misc/linkedin_talon/auditlog.png&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;It’s recommended to talk about the process of password spraying with whoever you’ll be testing before performing any of this activity. It’s also a good idea to get their password policy from them if they are onboard so you can tailor testing to not lockout anyone/anything out. If password spraying isn’t something your target is comfortable with, you shouldn’t perform it :)&lt;/p&gt;

&lt;p&gt;Also huge thanks to &lt;a href=&quot;https://twitter.com/Tyl0us&quot;&gt;Tylous&lt;/a&gt; for not only writing the tool but also making it public. It’s really great.&lt;/p&gt;</content><author><name>Ash</name></author><category term="Tradecraft and Techniques" /><category term="Active Directory" /><category term="Networks" /><category term="Password Spraying" /><category term="OSINT" /><summary type="html">I'll talk through how one can use LinkedIn to gather listings of usernames and email addresses that can be combined with password spraying tactics. For demonstration of password spraying, we'll target internal Active Directory services with the Talon toolset written by Tylous. I'll also document some of the extra functionality I added to the tool that is now included in the main version.</summary></entry><entry><title type="html">Zero-Point Security’s Certified Red Team Operator (CRTO) Review</title><link href="http://localhost:4000/Certified-Red-Team-Operator-Review/" rel="alternate" type="text/html" title="Zero-Point Security’s Certified Red Team Operator (CRTO) Review" /><published>2022-01-10T00:00:00-05:00</published><updated>2022-01-10T00:00:00-05:00</updated><id>http://localhost:4000/Certified-Red-Team-Operator-Review</id><content type="html" xml:base="http://localhost:4000/Certified-Red-Team-Operator-Review/">&lt;h1&gt;Overview&lt;/h1&gt;
&lt;hr /&gt;

&lt;p&gt;Red Team Ops is the course accompanying the Certified Red Team Operator (CRTO) certification offered by Zero-Point Security. The course was written by &lt;a href=&quot;https://twitter.com/_rastamouse&quot;&gt;Rasta Mouse&lt;/a&gt;, who you may recognize as the original creator of the &lt;a href=&quot;https://www.hackthebox.com/newsroom/prolab-rastalabs&quot;&gt;RastaLabs&lt;/a&gt; pro lab in HackTheBox. He maintains both the course content and runs Zero-Point Security.&lt;/p&gt;

&lt;p&gt;Red Team Ops is written for individuals with a general background in information security, especially those working in offensive security positions. The difficulty is most applicable to a junior audience, but I would argue the course environment is also useful for individuals who are more experienced red teamers.&lt;/p&gt;

&lt;p&gt;In this review I’ll give a brief overview of the course configuration, and talk about the pros and cons of the entire process in depth. I’ll also share my exam experience, and give some tips/tricks for passing. Lastly, I’ll close with some thoughts of why you might purchase the course (you totally should by the way).&lt;/p&gt;

&lt;h4 id=&quot;my-background&quot;&gt;My Background&lt;/h4&gt;
&lt;p&gt;CRTO was the logical next step in my personal journey after achieving OSCP in the prior year. After taking some time to get sped up on web application testing, I developed a huge interest
in Active Directory/Windows-centric tactics. This was especially true after &lt;a href=&quot;https://github.com/topotam/PetitPotam&quot;&gt;PetitPotam&lt;/a&gt; came out and the awesome &lt;a href=&quot;https://posts.specterops.io/certified-pre-owned-d95910965cd2&quot;&gt;work by Will Schroeder and Lee
Christensen&lt;/a&gt; was made public.&lt;/p&gt;

&lt;h4 id=&quot;a-bit-of-history&quot;&gt;A Bit of History&lt;/h4&gt;
&lt;p&gt;Prior to purchasing the course myself, Rasta announced a &lt;a href=&quot;https://www.zeropointsecurity.co.uk/blog/red-team-ops-2021-update&quot;&gt;significant change to how it would operate&lt;/a&gt;. Most notable of
which being the fact that Cobalt Strike is &lt;em&gt;included with the course purchase&lt;/em&gt;. Covenant is also no longer supported within the labs and course content, and &lt;em&gt;private&lt;/em&gt; lab environments are
provided to all students.&lt;/p&gt;

&lt;p&gt;There are a handful of reviews on both this updated version and the prior version with Covenant/BYOC2, shared labs, etc. To be clear, this review pertains to the most recent CRTO (CRTO2?) update.&lt;/p&gt;

&lt;h2 id=&quot;the-course&quot;&gt;The Course&lt;/h2&gt;
&lt;p&gt;Content within Red Team Ops course is split into the following sections:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. Course Introduction
	1. What is Red Teaming?
	2. Phases of an Engagement
	3. Command &amp;amp; Control
	4. Cobalt Strike Primer
2. Planning &amp;amp; Client Engagement Phase
3. Assessment Phase
	1. External Reconnaissance
	2. Initial Compromise
	3. Host Reconnaissance
	4. Host Persistence
	5. Host Privilege Escalation
	6. Domain Reconnaissance
	7. Lateral Movement
	8. Credentials &amp;amp; User Impersonation
	9. Password Cracking Hints &amp;amp; Tips
	10. Session Passing
	11. Pivoting
	12. Reverse Port Forwards
	13. Data Protection API
	14. Kerberos
	15. Group Policy
	16. Discretionary Access Control Lists
	17. MS SQL Servers
	18. Domain Dominance
	19. Forest &amp;amp; Domain Trusts
	20. Local Administrator Password Solution
	21. Bypassing Antivirus
	22. Bypassing AppLocker
	23. Data Hunting &amp;amp; Exfiltration
4. Post-Engagement &amp;amp; Reporting
5. Extending Cobalt Strike
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It would be too lengthy to talk about each section in detail, so I’ll highlight a few takeaways:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Operational Guidance&lt;/strong&gt;: One aspect of the course I found surprising is the amount of content around engagement planning and operation. While it’s not to the level of detail present in something like &lt;a href=&quot;https://redteam.guide/&quot;&gt;Red Team Development and Operations&lt;/a&gt; by Joe Vest, it does contain helpful information around planning, reporting, and the non-technical aspects of security consulting. This is valuable information, especially if you’re like me trying to figure out how to master both of these aspects.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Targeting Microsoft&lt;/strong&gt;: This sort of goes without saying, but you’ll notice that almost every section is focused around technologies such as Windows, Active Directory, Kerberos, and so on. This means that once you come out of this course you’ll have a massive bag of tricks to attempt during your next engagement. Bad news? We’ll if you’re tasked with an engagement on a shop that purely uses Macs and Chromebooks you might be out of luck. I don’t necessarily see this as a con as this course is intended to fill the widest use-case you’ll encounter as a junior pentester/red teamer, which is a Microsoft technology stack.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;OPSEC&lt;/strong&gt;: When applicable, course sections contain guidance around Operational Security (OPSEC) or in other words how to not get caught. These tidbits of information were &lt;em&gt;amazing&lt;/em&gt; for me to begin thinking about purposefully remaining quiet, a tactic I have not had to employ in the past. On top of that, the lab environment contains a Splunk ingestion server you can use to actually analyze events as they occur within the environment.&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;notice--primary&quot;&gt;A great piece of supplemental learning to go along with OPSEC content from the course is this talk by RastaMouse himself:&lt;br /&gt; 
&lt;a href=&quot;https://www.youtube.com/watch?v=qIbrozlf2wM&quot;&gt;Five Ways I got Caught Before Lunch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are five sections I found especially fun/interesting:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Initial Compromise&lt;/strong&gt;: Interesting tactics used to get a beacon to spawn on target machines, including topics such as malicious Office documents and HTA files.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Host Persistence&lt;/strong&gt;: Lots of cool ways to stay sticky on hosts, along with some cool exercises related to COM objects. This section is also probably really useful if you work in a SOC/DFIR type role.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Kerberos&lt;/strong&gt;: By far the most ingestible Kerberos overview I’ve ever encountered, packed with great techniques on how to attack it, especially tailored for AD environments (of course).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Forest &amp;amp; Domain Trusts&lt;/strong&gt;: This begins with an amazing overview of Active Directory trust types, then delves into ways you can attack each. Second only in my mind to Harmj0y’s extremely detailed &lt;a href=&quot;https://www.harmj0y.net/blog/redteaming/a-guide-to-attacking-domain-trusts/&quot;&gt;Guide to Attacking Domain Trusts&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Local Administrator Password Solution&lt;/strong&gt;: Fun ways to (ab)use LAPS-specific permissions within an environment.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Note: it was really hard to choose my top five.&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;center&gt;&lt;h1&gt;Pros of CRTO&lt;/h1&gt;&lt;/center&gt;
&lt;hr /&gt;

&lt;p align=&quot;center&quot;&gt;
	&lt;img src=&quot;/assets/images/crto/crto_overview.png&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;price&quot;&gt;Price&lt;/h2&gt;
&lt;p&gt;It would be hard to begin talking about the CRTO’s pros without first mentioning the price.&lt;/p&gt;

&lt;p&gt;At an astounding cost of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$472.0806&lt;/code&gt; US dollars you get access to the entire course, as well as any additional content that is added to the curriculum in the future.&lt;/p&gt;

&lt;p&gt;That’s a fraction compared to other industry leaders like:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Offensive Security&lt;/strong&gt;: generally starting at a minimum of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~$1,000&lt;/code&gt; (if not more)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;INE/eLearnSecurity&lt;/strong&gt;: at a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$749&lt;/code&gt; annual fee with individual exam fees.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SANS training&lt;/strong&gt;: with the GIAC course sitting at around &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~$8,000&lt;/code&gt; including an exam attempt.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;This is not to say that those training platforms don’t have value. I personally know that the opposite is especially true. I bring this up rather to illustrate how insanely cost-effective the CRTO is compared to the rest of the industry.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/crto/crto_price.png&quot; /&gt;
&lt;/p&gt;

&lt;h4 id=&quot;lab-time&quot;&gt;Lab Time&lt;/h4&gt;
&lt;p&gt;In order to access the labs, you must purchase lab time separately. This is purchased per hour, at a rate of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;£1.25/hr&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$1.7/hr&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I would at a minimum purchase 40 hours of lab time, but highly recommend future-proofing yourself with extra time. Let’s say you give yourself 80 hours, that brings your total cost including the course purchase to: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$607&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I personally went with 80 hours when I signed up. Let’s talk about why this matters.&lt;/p&gt;

&lt;h2 id=&quot;labs&quot;&gt;Labs&lt;/h2&gt;
&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/crto/crto_labs.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;The lab environment for CRTO is deployed through a platform called &lt;a href=&quot;https://www.snaplabs.io/&quot;&gt;SnapLabs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Why does this matter to you? well SnapLabs is where you’ll manage all your lab machines. This includes snapshotting, stopping/starting machines (duh), and resetting your lab environment.&lt;/p&gt;

&lt;p&gt;It’s also how you access your machines when you want to follow along with the course, perform exercises from the content, or just mess around. This is done through the web browser, with desktop sessions deployed through Apache Guacamole.&lt;/p&gt;

&lt;p&gt;Also, as I mentioned earlier &lt;em&gt;each student gets their own unique lab environment&lt;/em&gt;. You no longer have to worry about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;H3x_budd1e&lt;/code&gt; changing all the passwords or nuking that box you were working on. Your environment is completely yours.&lt;/p&gt;

&lt;h4 id=&quot;environment&quot;&gt;Environment&lt;/h4&gt;
&lt;p&gt;Once you purchase your lab time and receive access, you’ll be dropped into an environment with:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;An attacking Windows/Linux host (Kali)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MSSQL servers&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Exchange servers&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Unix hosts&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Windows workstations&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Windows domain controllers&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Splunk&lt;/strong&gt;… wait… &lt;strong&gt;Splunk&lt;/strong&gt;? &lt;strong&gt;&lt;em&gt;yes. Splunk.&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Did you hear me mention &lt;strong&gt;Splunk&lt;/strong&gt;? No way. Let’s talk about &lt;strong&gt;Splunk&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;splunk&quot;&gt;Splunk&lt;/h4&gt;
&lt;hr /&gt;

&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/crto/crto_splonk.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;This is a hidden gem that’s included in the course and something that I personally think is extremely beneficial for the student.&lt;/p&gt;

&lt;p&gt;The course not only provisions all these boxes for you to use, but also has them pushing logs to &lt;strong&gt;Splunk&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Wow! Amazing! Well guess what.. &lt;strong&gt;&lt;em&gt;you can access the Splunk instance too&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This was really useful for myself to:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;Realize just how many !@#!$%! events are generated in live networks&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Figure out how to filter down specific events I’m looking for&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Analyze detection methods for the tactics I employ&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You might remember I mentioned purchasing extra lab time. This is one of the reasons why. I plan on going back and using the lab from time to time to analyze the detection of tactics I’m executing in the real world. This is one of the reasons I think the course is also beneficial to red teamers with pre-existing experience.&lt;/p&gt;

&lt;h4 id=&quot;playground&quot;&gt;Playground&lt;/h4&gt;
&lt;p&gt;Using SnapLabs is really easy, and having the ability to spin up an entire lab on a whim has proved to be useful for more than just the course. There have been a couple instances where I’ve been chatting with someone on Discord about a technique or a tool, and quickly spun up the CRTO lab to test something.&lt;/p&gt;

&lt;p&gt;This is another reason to purchase more lab time if you’re able to. It’s a nice playground to have in your back pocket.&lt;/p&gt;

&lt;h2 id=&quot;rastas-teaching-style&quot;&gt;Rasta’s Teaching Style&lt;/h2&gt;
&lt;center&gt;&lt;h2&gt;This is easily the highlight of the entire course.&lt;/h2&gt;&lt;/center&gt;
&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/crto/crto_learn.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Each piece of course content is divided into bite-size chunks that can be easily ingested. An individual article usually begins with a rough overview of the minimum information needed to grasp a topic and understand why it matters. Next it will delve into usage examples that are short and sweet. These serve the purpose of getting your hands on the keyboard executing commands, which for myself is the most productive method for me to ingest information.&lt;/p&gt;

&lt;p&gt;Additionally, there are a handful of included videos walking you through a technique or demonstrating a tactic. These are usually ~10 minutes long, and fairly straight to the point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Personally, I found the articles on each topic to be where the course really shined.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Want to learn about Kerberoasting? Read the 5 minute article, then go perform the tactics in your live lab environment.&lt;/p&gt;

&lt;p&gt;No sifting through a PDF and making notes. No slide deck extravaganza. Just read a quick article and start playing around.&lt;/p&gt;

&lt;h4 id=&quot;comparisonsptsd&quot;&gt;Comparisons/PTSD&lt;/h4&gt;
&lt;p&gt;If you’ve experienced the OSCP, chances are you remember how hard it was to focus on the PDF or watch the provided videos.&lt;/p&gt;

&lt;p&gt;In my experience, I would try to force myself to ingest content, and do so at a rapid pace to keep up with my personal timelines (and expiring PWK lab time).&lt;/p&gt;

&lt;p&gt;Alternatively, with CRTO I found myself actually &lt;em&gt;looking forward&lt;/em&gt; to ingesting the course content, something that I’ve rarely been able to say in other learning efforts.&lt;/p&gt;

&lt;h2 id=&quot;cobalt-strike&quot;&gt;Cobalt Strike&lt;/h2&gt;
&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/crto/crto_cs.png&quot; /&gt;
&lt;/p&gt;
&lt;p&gt;Lastly, it must be mentioned that Cobalt Strike (CS) is included within the lab environment. If you’re like me, you’ve been dying to get your hands on this toolset for years. I found finally getting to use it to be extremely fun.&lt;/p&gt;

&lt;p&gt;Additionally, Rasta includes content on configuring CS to your needs (more on this later), which should help you kick start using it in the real world, should you have the ability to.&lt;/p&gt;

&lt;p&gt;As far as I’m aware, CRTO is the only (legal) way of getting a taste of using CS apart from purchasing a license. So if you’ve been looking to get their hands dirty with it, the course is a great place to start.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;center&gt;&lt;h1&gt;Cons of CRTO&lt;/h1&gt;&lt;/center&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;connection-options&quot;&gt;Connection Options&lt;/h2&gt;
&lt;p&gt;I mentioned this earlier but wanted to reiterate the topic. A common complaint with the course is that you are locked to the browser when accessing your lab machines. No VPN connection, no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ovpn&lt;/code&gt; file, just Apache Guacamole and lots of browser tabs.&lt;/p&gt;

&lt;p&gt;For myself this was really annoying in the beginning, but I quickly got used to it. It actually comes in handy if you’re switching between more than two assets inside the lab.&lt;/p&gt;

&lt;p&gt;With that said, it may be a major turn off for some people, which is warranted, but not enough in my mind to completely discount the course. I figured it’s worth mentioning in case you’re expecting VPN access.&lt;/p&gt;

&lt;h2 id=&quot;cobalt-strike-1&quot;&gt;Cobalt Strike&lt;/h2&gt;
&lt;p&gt;Yes, this is a pro and also a con.&lt;/p&gt;

&lt;p&gt;The course is tied heavily to usage of Cobalt Strike. The examples included within each section are strictly built for Cobalt Strike. This may or may not be a big deal for you depending on your situation. (i.e. whether or not you can afford it IRL).&lt;/p&gt;

&lt;p&gt;One thing I will say is that the techniques and tactics employed by CS can generally be adapted to any platform, so it’s more than likely still a value-add. Oftentimes, you’re really just using Cobalt Strike’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execute-assembly&lt;/code&gt; to run a binary on a host, which is not nearly unique to the platform.&lt;/p&gt;

&lt;p&gt;If this is something you’re worried about, I would recommend attempting to locate a similar or comparable functionality in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$c2_tool_you_use&lt;/code&gt; to whatever Cobalt Strike functionality is being used in the course.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;center&gt;&lt;h1&gt;Exam&lt;/h1&gt;&lt;/center&gt;
&lt;hr /&gt;

&lt;p&gt;The CRTO exam is a 48-hour assessment where the student must gather 6 of 8 flags to pass. This 48-hours of lab time is spread across a 4-day window, as you have the ability to stop and start the exam environment as needed.&lt;/p&gt;

&lt;p&gt;To pass one must simply submit the flags. &lt;em&gt;No reporting is necessary.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once your exam time begins, you will be provided with a packet containing a set of &lt;strong&gt;TTPs&lt;/strong&gt; to emulate. One must successfully emulate these &lt;strong&gt;TTPs&lt;/strong&gt; to progress through the environment, and collect all the flags.&lt;/p&gt;

&lt;p&gt;Also, since you can pause the exam and still start the labs, if you &lt;em&gt;really&lt;/em&gt; need to go back and double check something in a pseudo-dev environment, you can (although you’ll want avoid this as you progress).&lt;/p&gt;

&lt;p&gt;Overall, I would say the course is pretty difficult, but extremely fair. You may be asked to perform steps outside of your comfort zone, but I truly mean it when I say &lt;strong&gt;&lt;em&gt;the course content contains everything you need to pass&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;keys-for-success&quot;&gt;Keys For Success&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;FAQ&lt;/em&gt;&lt;/strong&gt;: Read the &lt;a href=&quot;https://www.zeropointsecurity.co.uk/red-team-ops/book-exam&quot;&gt;course FAQ&lt;/a&gt; and &lt;a href=&quot;https://www.zeropointsecurity.co.uk/red-team-ops/book-exam&quot;&gt;exam FAQ&lt;/a&gt;. Seriously, &lt;strong&gt;read the FAQs&lt;/strong&gt;. There were so many times in the Discord server I saw questions that are answered on those links.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;Discord&lt;/em&gt;&lt;/strong&gt;: Speaking of Discord, you should totally join the &lt;a href=&quot;https://discord.com/invite/yrktDxPA&quot;&gt;Zero-Point Security Discord server&lt;/a&gt;. This was crucial for not only my learning experience, but also my passing of the exam (more on this in a sec). Within the server you’ll find students progressing through the course/labs and a fairly active community. I found everyone to be very helpful should you have any questions on the course content.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;Cobalt Strike Config&lt;/em&gt;&lt;/strong&gt;: Make sure you review every piece of content in the course related to Cobalt Strike and its configuration. Additionally, it would be really helpful to take a look at some &lt;a href=&quot;https://github.com/rsmudge/Malleable-C2-Profiles&quot;&gt;Malleable C2 Profiles&lt;/a&gt; and understand what they are doing. This is going to help you out immensely when you start your exam.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;Have fun!&lt;/em&gt;&lt;/strong&gt;: The challenges within the exam are extremely enjoyable. So start the exam, get Cobalt Strike configured correctly, sit back, and start progressing through the environment. If you worked your way through all the course content and took good notes, you should have a good experience.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;my-experience-with-the-exam&quot;&gt;My Experience With the Exam&lt;/h2&gt;
&lt;p&gt;First off, let me say that even after my initial struggles, this was &lt;strong&gt;by far&lt;/strong&gt; the &lt;em&gt;most fun&lt;/em&gt; I’ve had on an exam so far.&lt;/p&gt;

&lt;p&gt;I scheduled my exam scheduled Friday at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10:00 AM&lt;/code&gt; my local time. I woke up around &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8:00 AM&lt;/code&gt;, had a small breakfast, made some coffee, and gathered my notes.&lt;/p&gt;

&lt;p&gt;The clock hit 10 and my lab time started. I reviewed the TTPs passed to me as part of the exam and &lt;em&gt;immediately&lt;/em&gt; felt that rush you feel when you begin an exam you know you didn’t study for. You know what I’m talking about. That sinking feeling in your stomach of inevitable failure.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I had focused so much on all the tactics presented in the course that I had forgotten to review the course material around configuring Cobalt Strike.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;scrambling&quot;&gt;Scrambling&lt;/h4&gt;
&lt;p&gt;By around noon I was effectively freaking out, worried I would not even be able to reach what was effectively the first step of the exam.&lt;/p&gt;

&lt;p&gt;I paused the exam environment for a large part of the entire first day and spent the remainder reading Cobalt Strike documentation, reviewing course content for configuration guidance, and generating my profile.&lt;/p&gt;

&lt;p&gt;Time progressed, and eventually at around &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2:00 AM&lt;/code&gt; the next day (Saturday), I decided to give it a go.&lt;/p&gt;

&lt;p&gt;I powered on the exam machines. Tried what I had been preparing for the entire day and…all my attempts were unsuccessful. Distraught and pretty stressed out I paused everything and went to bed.&lt;/p&gt;

&lt;h4 id=&quot;round-two&quot;&gt;Round Two&lt;/h4&gt;
&lt;p&gt;I slept from around &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4AM&lt;/code&gt; - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10AM&lt;/code&gt;, got up and immediately hit the ground running.&lt;/p&gt;

&lt;p&gt;Refreshed, I realized I had rabbit-holed &lt;em&gt;really really&lt;/em&gt; hard the entire prior day, and tried a new method to achieve &lt;em&gt;“step 1”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;FINALLY, I received the “output” I was looking for. I had the breakthrough I needed.&lt;/p&gt;

&lt;p&gt;This occurred around noon on the second day, and I had also only used around ~6 hours of exam time thanks to the tactical pause. Now it was time to truly begin.&lt;/p&gt;

&lt;h4 id=&quot;riding-the-wave-of-a-dunning-kruger-graph&quot;&gt;Riding the wave of a Dunning-Kruger graph&lt;/h4&gt;
&lt;p&gt;At this point, I was fully riding the wave of a steep &lt;a href=&quot;https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect&quot;&gt;Dunning-Kruger graph&lt;/a&gt;.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/crto/crto_graph.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;I took some notes throughout the exam to document what I was feeling, the one around this time read:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;I spent around ~20 hours getting it [Cobalt Strike] to work
I feel like I can finally actually take the exam
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And take the exam I did. Within an hour I had compromised the first host, and after a few more hours worked my way to an additional handful of assets.&lt;/p&gt;

&lt;p&gt;I progressed through the lab environment, never having to reset the exam or restart/reconfigure Cobalt Strike.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;I really wish I could share the war stories of all the cool steps within the lab, but you’ll just have to see for yourself.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As time progressed, eventually the clock struck around &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4AM&lt;/code&gt; the following day (Sunday). I had been going since around &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10AM&lt;/code&gt; the previous day (Saturday).&lt;/p&gt;

&lt;p&gt;At this point I had progressed through the environment pretty far, and after a large final hurdle finally gained access to a total of six machines in the environment.&lt;/p&gt;

&lt;h4 id=&quot;no-flags-yet-wait-no-flags-yet&quot;&gt;No flags yet. Wait, no flags yet!?&lt;/h4&gt;
&lt;p&gt;Yeah so it turns out you really shouldn’t reset the exam environment unless you have to. During my initial Cobalt Strike fiasco I had reset the environment, which it turns out produces an error where no flags are present on the exam machines.&lt;/p&gt;

&lt;p&gt;I was so focused on progressing across hosts that this didn’t really cross my mind until I reached the sixth machine. After which I kind of thought &lt;em&gt;“Wait, should I be seeing some flags?”&lt;/em&gt; and got worried.&lt;/p&gt;

&lt;p&gt;After reviewing the FAQ, it looked like each machine should possess an individual flag. My notebook at this time read:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Popped 6/8 machines which means I passed
kinda.... the only issue is none of my machines have flags on them lol. Trying to get ahold of Rasta to ask him
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I DMed Rasta and thanks to his help and some screenshot providing, was awarded the flags I needed to pass. At this point it is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6AM&lt;/code&gt; on Sunday, the third day of my exam, and around 44 hours since my exam began.&lt;/p&gt;

&lt;p&gt;I was ecstatic, but also really tired. I paused my exam and got some much needed rest.&lt;/p&gt;

&lt;p&gt;Fast forward to Monday and a pretty ruined sleep schedule. The next step was deciding between pursuing the final two remaining flags and receiving my cert or &lt;strong&gt;not pursuing&lt;/strong&gt; the two remaining flags and &lt;strong&gt;&lt;em&gt;still receiving my cert&lt;/em&gt;&lt;/strong&gt;. I opted for the latter option, which I sort of regret to be honest. I ended up using the day to handle some admin (AKA real life) stuff and rest. Part of me is still curious as to the steps it would take to get the final two flags.&lt;/p&gt;

&lt;p&gt;Anyways, after the exam environment closed, I officially received my &lt;a href=&quot;https://twitter.com/_bin_Ash/status/1455545788705255438&quot;&gt;CRTO certification&lt;/a&gt; and passed the course.&lt;/p&gt;

&lt;p&gt;My CRTO cert on my LinkedIn:&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;
        &lt;img src=&quot;/assets/images/crto/crto_cert.png&quot; /&gt;
&lt;/p&gt;

&lt;h1 id=&quot;closing-thoughts&quot;&gt;Closing Thoughts&lt;/h1&gt;
&lt;p&gt;There is elegance in being succinct. CRTO was a breath of fresh air after banging my head against the ~800-page PDF that is OSCP. I really appreciate Rasta’s presentation of information, and can personally say this is the &lt;em&gt;first time ever&lt;/em&gt; I’ve &lt;strong&gt;really&lt;/strong&gt; looked forward to going through course material.&lt;/p&gt;

&lt;p&gt;Maybe you just passed your OSCP and are looking to transition into a red team/threat emulation role.&lt;/p&gt;

&lt;p&gt;Maybe you’re already running internal network pentests and want to up your game to the next level.&lt;/p&gt;

&lt;p&gt;Maybe you just want to use Cobalt Strike for a fraction of the price.&lt;/p&gt;

&lt;p&gt;Whether or not any of these are true, I would &lt;em&gt;highly&lt;/em&gt; recommend this course to anyone looking to further develop their red team skill set.&lt;/p&gt;</content><author><name>Ash</name></author><category term="Certifications" /><category term="Active Directory" /><category term="Cobalt Strike" /><category term="Certifications" /><summary type="html">An overview and review of Zero-Point Security's (A.K.A. RastaMouse) newly revamped Certified Red Team Operator (CRTO) certification, and why you might want to pursue it.</summary></entry></feed>